import{_ as d,r,o as n,c as i,f as t,a as e,b as a,d as l,e as o}from"./app-7a138ae9.js";const h={},s=o('<h1 id="pusher-를-이용한-실시간-채팅-웹앱-만들기-1-w-laravel-nuxt" tabindex="-1"><a class="header-anchor" href="#pusher-를-이용한-실시간-채팅-웹앱-만들기-1-w-laravel-nuxt" aria-hidden="true">#</a> Pusher 를 이용한 실시간 채팅 웹앱 만들기 #1 (w/ Laravel, Nuxt)</h1><figure><img src="https://images.velog.io/images/bdu00chch/post/1931db79-06f1-41c0-a400-c63ead2bcfbc/PUSHER.png" alt="Pusher Logo" tabindex="0" loading="lazy"><figcaption>Pusher Logo</figcaption></figure><h2 id="pusher" tabindex="-1"><a class="header-anchor" href="#pusher" aria-hidden="true">#</a> <code>Pusher</code>?</h2><p>채팅 서비스나 구글 Docs의 동시 문서편집 같이 웹 페이지를 통해 클라이언트들이 실시간으로 상호작용을 해야 하는 기능을 깔끔하게 개발하려면 웹소켓을 사용해야 합니다.</p>',4),u=e("p",null,"웹소켓을 사용하려면, 직접 웹소켓 서버를 구현해야 하는데 이 과정이 복잡하고 최종적으로 완성할 서비스에 비해 웹소켓 구현만을 위한 개발시간이 과도하게 사용될 수 있습니다.",-1),p=e("p",null,[e("code",null,"Pusher"),a("는 이러한 상황에서 서버-클라이언트 간 실시간 통신에 필요한 기능들을 미리 구현해 API와 플랫폼/언어별 라이브러리로 제공하는 "),e("code",null,"Real-Time Communication"),a(" 솔루션입니다.")],-1),_=e("p",null,[a("이 "),e("code",null,"Pusher"),a("를 사용하면 실시간 통신이 필요한 기능들을 내 서비스의 비즈니스 로직만 신경 써서 쉽고 간단하게 구현할 수 있습니다.")],-1),f={href:"https://pusher.com/channels",target:"_blank",rel:"noopener noreferrer"},m=o('<h2 id="실시간-채팅-서비스" tabindex="-1"><a class="header-anchor" href="#실시간-채팅-서비스" aria-hidden="true">#</a> 실시간 채팅 서비스</h2><p>이번 시리즈에서는 <code>Laravel</code>, <code>Vue</code>, 그리고 <code>Pusher</code>를 사용해서 실시간 채팅 서비스를 만들어보겠습니다.</p><p>백엔드 프레임워크로는 러닝 커브가 상대적으로 완만하고 빌트인 기능이 비교적 많은 <code>Laravel</code>을 쓰고, 프론트엔드 프레임워크는 <code>Vue</code>와 <code>Nuxt</code>를 사용하겠습니다. 기타 사용하는 라이브러리들은 포스팅 하단에 목록으로 정리해두겠습니다.</p><div class="hint-container warning"><p class="hint-container-title">경고</p><p>본 시리즈에서는 <code>Nuxt 2</code>, <code>Laravel 8</code>을 사용하였습니다.</p><p>이후 버전을 사용하는 경우 API가 달라질 수 있습니다.</p></div><p>처음에는 &#39;채팅 프로그램&#39; 의 가장 필수적인 기능들만 개발하여 서버에 배포해보고, 점차 기능들을 추가해나가며 완성형의 채팅 서비스를 만들 예정입니다.</p><p>이 과정에서 배포 방식도 <code>Container</code>와 <code>Kubernetes</code>를 사용하는 방식으로 점차 바꾸어보고, 동시에 마이크로서비스 구조로 바꾸어보겠습니다.</p><hr><h2 id="사용-프레임워크-라이브러리" tabindex="-1"><a class="header-anchor" href="#사용-프레임워크-라이브러리" aria-hidden="true">#</a> 사용 프레임워크 &amp; 라이브러리</h2><h3 id="프론트엔드" tabindex="-1"><a class="header-anchor" href="#프론트엔드" aria-hidden="true">#</a> 프론트엔드</h3><ul><li><code>Vue 2</code> &amp; <code>Nuxt 2</code></li><li><code>Tailwind CSS</code></li><li><code>Laravel Echo</code></li></ul><h3 id="백엔드" tabindex="-1"><a class="header-anchor" href="#백엔드" aria-hidden="true">#</a> 백엔드</h3><ul><li><code>Laravel</code></li><li><code>Pusher</code></li></ul><h3 id="배포-환경" tabindex="-1"><a class="header-anchor" href="#배포-환경" aria-hidden="true">#</a> 배포 환경</h3><ul><li><code>GCP</code> (Google Cloud Platform)</li><li><code>Kubernetes</code></li></ul>',14);function x(b,g){const c=r("ExternalLinkIcon");return n(),i("div",null,[s,t(" more "),u,p,_,e("p",null,[e("a",f,[a("Pusher Website"),l(c)])]),m])}const P=d(h,[["render",x],["__file","1.html.vue"]]);export{P as default};
