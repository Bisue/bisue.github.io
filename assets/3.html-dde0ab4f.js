import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,d as n,e as s,b as i,a}from"./app-ed7403e9.js";const l={},d=a(`<h1 id="pusher-를-이용한-실시간-채팅-웹앱-만들기-3-w-laravel-nuxt" tabindex="-1"><a class="header-anchor" href="#pusher-를-이용한-실시간-채팅-웹앱-만들기-3-w-laravel-nuxt" aria-hidden="true">#</a> Pusher 를 이용한 실시간 채팅 웹앱 만들기 #3 (w/ Laravel, Nuxt)</h1><p>이번 글에서는 본격적으로 채팅 서비스를 위한 백엔드 코드들을 <code>Laravel</code>로 작성해보면서 <code>Laravel</code>에서 <code>Pusher</code>와 연동하여 이벤트를 클라이언트들로 브로드캐스팅 해보겠습니다.</p><h2 id="가장-기본적인-기능-구현하기" tabindex="-1"><a class="header-anchor" href="#가장-기본적인-기능-구현하기" aria-hidden="true">#</a> 가장 기본적인 기능 구현하기</h2><h3 id="컨트롤러-생성" tabindex="-1"><a class="header-anchor" href="#컨트롤러-생성" aria-hidden="true">#</a> 컨트롤러 생성</h3><p>일단 먼저 어떤 사용자가 다른 사용자에게 보낼 메세지를 작성하고, 엔터를 누르거나 &#39;보내기&#39; 버튼을 누르면 그 메세지가 우리의 서버를 거쳐서 채팅에 참여하는 다른 사용자들에게 보내져야 할 것입니다.</p><p>그러기 위해서는 먼저 우리 서버에서 이렇게 사용자가 보낼 메세지를 담은 요청을 처리할 무언가가 필요합니다. 그 무언가를 우리는 <code>ChatController</code> 라고 이름 붙이고 이것을 만들어나가겠습니다.</p><p>프로젝트 루트(artisan 파일이 있는 디렉토리)에서 아래 <code>artisan</code> 명령을 사용하면 가장 기본적인 <code>Laravel</code> 컨트롤러의 뼈대를 가진 <code>app/Http/Controllers/ChatController.php</code> 가 생성됩니다. 직접 파일을 만들어도 되지만 <code>artisan</code> 명령을 사용하면 편리하게 만들 수 있습니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:controller ChatController
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>만들어진 파일은 가장 기본적인 컨트롤러의 형태입니다. 여기에 사용자가 메세지를 보내려고 할 때의 요청을 처리할 <code>send</code> 메서드를 추가합니다. 내용은 아직 구현하지 않습니다.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ChatController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Todo..</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="라우팅-정의" tabindex="-1"><a class="header-anchor" href="#라우팅-정의" aria-hidden="true">#</a> 라우팅 정의</h3><p>지금 만든 컨트롤러는 &#39;어떤 요청을 누가 처리할 건가?&#39; 에서 &#39;누가&#39; 부분입니다. 어떤 컨트롤러의 메서드들이 어떤 요청을 담당해서 처리할 건지 분기하는 부분에 대한 정의가 필요합니다.</p><p>이 부분을 &#39;라우팅&#39; 이라고 하며 라우팅에 대한 정의는 <code>routes/</code> 디렉토리에 있는 파일들에 들어있습니다.</p>`,13),u={class:"hint-container info"},r=n("p",{class:"hint-container-title"},"정보",-1),k=n("code",null,"routes/api.php",-1),v=n("code",null,"routes/web.php",-1),m=n("code",null,"app/Providers/RouteServiceProvider.php",-1),b=n("code",null,"boot",-1),h={href:"https://laravel.kr/docs/8.x/routing",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="hint-container info"><p class="hint-container-title">정보</p><p>이 시리즈에서는 <code>Laravel</code>을 API 서버로 사용할 것이므로 쓸모없는 미들웨어는 제외하고 API에 필요한 미들웨어들만 모아서 이미 정의되어 있는 <code>api</code> 미들웨어 그룹을 사용하는 <code>routes/api.php</code>에서만 라우트들을 정의하겠습니다.</p></div><p>우리가 만든 <code>ChatController</code>의 <code>send</code> 메서드는 <code>[POST] /chat/send</code> 로 들어오는 요청을 처리하도록 라우트를 정의하겠습니다.</p><p>그 전에, 기본적으로 <code>routes/api.php</code>의 라우트들은 모두 <code>/api</code>라는 prefix를 갖도록 설정되어있는데, 우리는 <code>routes/web.php</code>를 사용하지 않을 것이므로 거추장스러운 접두사를 빼겠습니다.</p><p><code>app/Providers/RouteServiceProvider.php</code>의 <code>boot</code> 메서드로 가서 접두사를 붙이는 부분을 수정합니다. 메서드 체인에서 <code>prefix(&#39;api&#39;)</code> 메서드 호출 부분을 수정하면 됩니다.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">configureRateLimiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Route::prefix(&#39;api&#39;)</span>
        <span class="token comment">//     -&gt;middleware(&#39;api&#39;)</span>
        <span class="token comment">//     -&gt;namespace($this-&gt;namespace)</span>
        <span class="token comment">//     -&gt;group(base_path(&#39;routes/api.php&#39;));</span>
        
        <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;api&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">namespace</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;routes/api.php&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;web&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">namespace</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;routes/web.php&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 routes/api.php에서 <code>[POST] /chat/send</code>에 대한 라우트를 작성하겠습니다.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>ChatController</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>

<span class="token comment">/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the &quot;api&quot; middleware group. Enjoy building your API!
|
*/</span>

<span class="token comment">// Route::middleware(&#39;auth:api&#39;)-&gt;get(&#39;/user&#39;, function (Request $request) {</span>
<span class="token comment">//     return $request-&gt;user();</span>
<span class="token comment">// });</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/chat/send&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">ChatController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;send&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>기존에 파일에 존재하던 쓸모없는 라우트는 지우고, <code>[POST] /chat/send</code> 요청을 <code>ChatController</code>의 <code>send</code> 메서드가 처리하게 하는 라우트를 하나 작성했습니다.</p><p>이제 남은 것은 <code>ChatController</code>의 <code>send</code> 메서드의 내용을 작성하는 부분입니다.</p><h3 id="이벤트-작성" tabindex="-1"><a class="header-anchor" href="#이벤트-작성" aria-hidden="true">#</a> 이벤트 작성</h3><p><code>send</code> 메서드를 작성하기 전에, <code>Laravel</code>의 브로드캐스팅 기능은 특정 이벤트가 발생했을 때, <code>Laravel Event</code> 객체 데이터를 브로드캐스팅 채널을 구독하는 클라이언트들에게 전달하며 해당 이벤트가 발생했다는 것을 알려주는 기능입니다.</p><p>따라서 브로드캐스팅을 하려면 먼저 <code>Event</code> 객체를 정의해야합니다. 아래 명령으로 <code>ChatSent</code>라는 <code>Event</code> 클래스 파일을 만들어 정의합니다. 만들어진 파일은 <code>app/Events</code> 디렉토리에 생성됩니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:event ChatSent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>만들어진 파일의 모습은 다음과 같습니다.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Events</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Broadcasting<span class="token punctuation">\\</span>Channel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Broadcasting<span class="token punctuation">\\</span>InteractsWithSockets</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Broadcasting<span class="token punctuation">\\</span>PresenceChannel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Broadcasting<span class="token punctuation">\\</span>PrivateChannel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Broadcasting<span class="token punctuation">\\</span>ShouldBroadcast</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>Dispatchable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Queue<span class="token punctuation">\\</span>SerializesModels</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ChatSent</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Dispatchable</span><span class="token punctuation">,</span> InteractsWithSockets<span class="token punctuation">,</span> SerializesModels<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Create a new event instance.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Get the channels the event should broadcast on.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Broadcasting<span class="token punctuation">\\</span>Channel<span class="token punctuation">|</span><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">broadcastOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PrivateChannel</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;channel-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ChatSent</code> 객체는 사용자가 메세지를 적어 보내면, 그 보낸이와 보낸 메세지 데이터를 담아 클라이언트로 전달되어야 합니다.</p><p>그러므로 클래스 내부에 변수를 만들고, 객체를 생성할 때 생성자에서 데이터를 넣을 수 있게 합니다.</p><p>또, 이벤트를 브로드캐스트하려면 해당 이벤트가 <code>ShouldBroadcast</code> 인터페이스를 구현해야합니다. 기본적으로 상단에 <code>use</code> 구문으로 들어가 있으므로, 바로 상속만 시켜주면 됩니다.</p><p><code>broadcastOn</code> 메서드는 이 이벤트가 브로드캐스트될 때, 어떤 채널을 통해 브로드캐스팅 될지 선택해주는 부분입니다.</p><p>여기서 채널의 종류로 <code>Public</code>, <code>Private</code>, <code>Presence</code> 세 가지가 있는데, 크게 클라이언트에서 해당 채널을 구독할 때 인증 절차를 거치느냐, 안 거치느냐의 두 분류로 나눌 수 있습니다.</p><p>우리의 가장 처음의 채팅 앱은 어떤 로그인도 없이 익명으로 대화할 수 있는 채팅 앱을 만들 예정입니다. 따라서 <code>Public</code> 채널을 사용하겠습니다.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ShouldBroadcast 인터페이스</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">ChatSent</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldBroadcast</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Dispatchable</span><span class="token punctuation">,</span> InteractsWithSockets<span class="token punctuation">,</span> SerializesModels<span class="token punctuation">;</span>

    <span class="token comment">// 데이터 변수 추가</span>
    <span class="token keyword">public</span> <span class="token variable">$sender</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$message</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$sentAt</span><span class="token punctuation">;</span>

    <span class="token comment">// 생성자에서 값을 받아 할당</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$sender</span><span class="token punctuation">,</span> <span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$sentAt</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sender</span> <span class="token operator">=</span> <span class="token variable">$sender</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">message</span> <span class="token operator">=</span> <span class="token variable">$message</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sentAt</span> <span class="token operator">=</span> <span class="token variable">$sentAt</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Laravel에서 Public 채널은 그냥 Channel 클래스로 표현합니다.</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">broadcastOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Channel</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;chat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="chatcontroller의-send-메서드-작성" tabindex="-1"><a class="header-anchor" href="#chatcontroller의-send-메서드-작성" aria-hidden="true">#</a> <code>ChatController</code>의 <code>send</code> 메서드 작성</h3><p>이제 글의 가장 첫 부분에서 미뤄두었던 <code>ChatController</code>의 <code>send</code> 메서드를 작성하기 위한 모든 나머지 코드들을 작성했습니다. 이제 <code>ChatController</code>의 <code>send</code> 메서드만 마저 작성하면 됩니다.</p><p><code>send</code> 메서드가 해야할 일은 간단합니다.</p><p>클라이언트에서 메세지와 보내는 사람의 이름을 간단하게 문자열의 형태로 요청에 담아 보낼것입니다. <code>send</code> 메서드는 단순히 이 데이터를 가지고 <code>ChatSent</code> 이벤트 객체를 하나 생성해 클라이언트들에게 브로드캐스팅하면 됩니다.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$sender</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sender&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChatSent</span><span class="token punctuation">(</span><span class="token variable">$sender</span><span class="token punctuation">,</span> <span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>가장 간단한 형태의 채팅 앱을 위한 백엔드 코드 작성이 끝났습니다.</p><p>지금 코드로는 DB도 사용하지 않아 클라이언트에서 새로고침을 하거나 하면 기존 대화목록이 남아있지도 않고, 단순히 클라이언트에서 메세지를 담은 요청을 우리 서버에 보내면, <code>chat</code> 채널을 구독하는 클라이언트들에게 브로드캐스팅하는 기능만 담당할 수 있습니다.</p><p>다음 포스팅부터 간단한 채팅 페이지를 만들어보고, 이 간단한 기능이 잘 작동하는지 먼저 테스트해본 후에 로그인, DB 연동 등 여러 가지 기능을 추가해보면서 가장 간단한 형태부터 우리가 원하는 최종 형태까지 채팅 앱을 개선하겠습니다.</p>`,31);function f(w,y){const e=p("ExternalLinkIcon");return c(),o("div",null,[d,n("div",u,[r,n("p",null,[s("기본 설정에서, "),k,s("의 라우트들과 "),v,s("의 라우트들은 서로 다른 속성(미들웨어, 접두사, 등등)을 갖습니다. 각각 어떤 속성들이 부여되는지는 "),m,s("의 "),b,s(" 메서드에서 확인할 수 있습니다. 자세한 내용은 "),n("a",h,[s("공식문서 참고"),i(e)]),s(".")])]),g])}const x=t(l,[["render",f],["__file","3.html.vue"]]);export{x as default};
