import{_ as d,r as c,o as r,c as i,f as t,a,b as e,d as o,e as s}from"./app-eae94132.js";const l={},p=a("h1",{id:"pusher-를-이용한-실시간-채팅-웹앱-만들기-2-w-laravel-nuxt",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#pusher-를-이용한-실시간-채팅-웹앱-만들기-2-w-laravel-nuxt","aria-hidden":"true"},"#"),e(" Pusher 를 이용한 실시간 채팅 웹앱 만들기 #2 (w/ Laravel, Nuxt)")],-1),u=a("p",null,[e("이번 글에서는 "),a("code",null,"Laravel"),e(" 개발 환경을 설정하고, 새로운 "),a("code",null,"Laravel"),e(" 프로젝트를 하나 만들어 그 프로젝트 안에서의 기본 설정과 "),a("code",null,"Pusher"),e(" 와의 연동을 위한 환경설정을 하겠습니다.")],-1),v={class:"hint-container info"},h=s('<p class="hint-container-title">정보</p><p>기본적으로 <code>PHP</code>와 패키지 매니저인 <code>Composer</code>가 로컬 환경에 설치되어 있다고 가정하겠습니다. 혹시 <code>PHP</code>, <code>Composer</code>가 설치가 되어있지 않다면 본인의 플랫폼에 맞춰서 <code>PHP</code>와 <code>Composer</code>를 설치해주세요. 이후에 사용할 <code>MySQL</code>도 같이 설치해주세요.</p>',2),m=a("code",null,"Chocolatey",-1),_={href:"https://wani.kr/posts/2016/07/29/window-enviroment-settings/",target:"_blank",rel:"noopener noreferrer"},b=s(`<figure><img src="https://images.velog.io/images/bdu00chch/post/4d6941bb-f21a-4a0d-ab35-65225115b472/1024px-Logo.min.svg.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="laravel-프로젝트-만들기" tabindex="-1"><a class="header-anchor" href="#laravel-프로젝트-만들기" aria-hidden="true">#</a> <code>Laravel</code> 프로젝트 만들기</h2><p>먼저, <code>Composer</code>를 통해 새로운 <code>Laravel</code> 프로젝트를 만들기 위해서 새 프로젝트를 만들고자 하는 디렉토리로 이동 후 <code>composer create-project laravel/laravel</code> 명령을 실행해주세요.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>YOUR_DIRECTORY<span class="token operator">&gt;</span>
<span class="token function">composer</span> create-project laravel/laravel <span class="token operator">&lt;</span>YOUR_APP_NAME<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="기본-laravel-프로젝트-설정" tabindex="-1"><a class="header-anchor" href="#기본-laravel-프로젝트-설정" aria-hidden="true">#</a> 기본 <code>Laravel</code> 프로젝트 설정</h2><h3 id="env-파일-수정" tabindex="-1"><a class="header-anchor" href="#env-파일-수정" aria-hidden="true">#</a> <code>.env</code> 파일 수정</h3><p>가장 먼저 <code>.env</code> 파일을 수정합니다. <code>.env</code> 파일은 <code>Laravel</code>에서 사용해야되는 값들 중, 개발/배포 환경에서 서로 달라야 하는 값이나 민감한 값들을 관리하기 위해서 사용되는 파일입니다.</p><p>이 파일에서 변경해야 될 값이 많지만, 여기서 지금 수정해야 될 부분은 데이터베이스 연결 관련 값들 입니다.</p><div class="language-dotenv line-numbers-mode" data-ext="dotenv"><pre class="language-dotenv"><code>DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=&lt;YOUR_DB_NAME&gt;
DB_USERNAME=&lt;YOUR_DB_USERNAME&gt;
DB_PASSWORD=&lt;YOUR_DB_PASSWORD&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여기서는 로컬 개발환경에서 사용할 데이터베이스가 로컬에 설치되어 기본 포트에서 동작하고 있다고 가정하겠습니다. 환경이 다르다면 위 값들을 적절하게 수정하면 됩니다.</p><h3 id="데이터베이스-생성" tabindex="-1"><a class="header-anchor" href="#데이터베이스-생성" aria-hidden="true">#</a> 데이터베이스 생성</h3><p><code>.env</code>의 <code>DB_DATABASE</code>에 설정한 DB 이름과 같은 데이터베이스를 만들겠습니다. 테이블은 만들지 않고 데이터베이스만 만듭니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>YOUR_DB_USERNAME<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span>
Enter Password: 

<span class="token operator">&gt;</span> create database <span class="token operator">&lt;</span>YOUR_DB_NAME<span class="token operator">&gt;</span>
<span class="token operator">&gt;</span> <span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="마이그레이션-실행-및-구동-확인" tabindex="-1"><a class="header-anchor" href="#마이그레이션-실행-및-구동-확인" aria-hidden="true">#</a> 마이그레이션 실행 및 구동 확인</h3>`,14),g=a("code",null,"Laravel",-1),P=a("br",null,null,-1),k={href:"http://127.0.0.1:8000",target:"_blank",rel:"noopener noreferrer"},f=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate
php artisan serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pusher-준비" tabindex="-1"><a class="header-anchor" href="#pusher-준비" aria-hidden="true">#</a> <code>Pusher</code> 준비</h2>`,2),x={href:"https://pusher.com/",target:"_blank",rel:"noopener noreferrer"},E=s(`<p>로그인하면 대시보드 페이지로 이동하는데, 여기서 <code>Channels</code>로 들어갑니다. 여기서 앱을 만들고 설정할 수 있는데, <code>Create App</code> 버튼을 누르고 아래처럼 정보를 입력하여 앱을 만듭니다.</p><figure><img src="https://images.velog.io/images/bdu00chch/post/705502d0-c30c-4e2c-a1c6-2a8ec7628a66/화면 캡처 2021-07-11 002036.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>만들 때 <code>Create apps for multiple environments?</code> 라는 옵션이 있는데, 이는 각기 다른 환경(개발/배포)에서의 <code>Pusher</code> 앱을 다르게 연결하려고 여러개의 앱을 자동으로 네이밍하여 만들어주는 옵션입니다.</p><p>여기서는 개발/배포 환경에 각각 다른 앱을 연결해 줄 예정이므로 체크하겠습니다.</p><p>아래의 프론트엔드, 백엔드 스택을 선택하는 부분이 있는데, 이는 앱을 만들고 나면 <code>Pusher</code>가 도움말을 제공해주는데, 스택에 맞춘 도움말을 제공하기 위한 부분입니다. 기본값 그대로 냅둬도 괜찮지만, 이왕 설정하는 김에 우리가 사용할 <code>Vue</code>, <code>Laravel</code>로 맞춰줍시다.</p><p>앱이 만들어지면, 앱 정보를 표시하는 페이지가 나타납니다. 여기서 왼쪽 메뉴 중 <code>App Keys</code> 메뉴를 눌러봅니다.</p><figure><img src="https://images.velog.io/images/bdu00chch/post/87dad409-6fae-4d1c-82df-19a0f0b445fb/화면 캡처 2021-07-11 002807.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이 페이지는 백엔드, 프론트엔드에서 해당 <code>Pusher</code> 앱에 연결하기 위한 정보들이 표시되는 페이지입니다. 이 정보들만 있으면 누구라도 이 <code>Pusher</code> 앱에 연결하여 개발할 수 있습니다. 따라서 이 정보들은 다른 사람에게 노출되어선 안됩니다.</p><p>이 4가지 값들을 아래 <code>Pusher</code> 연동 부분에서 사용하겠습니다.</p><h2 id="pusher-연동을-위한-준비" tabindex="-1"><a class="header-anchor" href="#pusher-연동을-위한-준비" aria-hidden="true">#</a> <code>Pusher</code> 연동을 위한 준비</h2><p><code>Pusher</code>를 사용하기 위해 <code>Laravel</code>에서 설정해야하는 부분을 수정해보겠습니다.</p><h3 id="broadcastserviceprovider-등록" tabindex="-1"><a class="header-anchor" href="#broadcastserviceprovider-등록" aria-hidden="true">#</a> <code>BroadcastServiceProvider</code> 등록</h3><p><code>Laravel</code>의 <code>Event</code>를 웹소켓을 통해 클라이언트로 <code>Broadcast</code> 하려면 <code>Laravel</code>의 <code>BroadcastServiceProvider</code>를 등록하여 기능을 활성화 해야합니다. 기본적으로 이 등록 부분이 주석 처리 되어있어서, 간단하게 주석 해제만 해주면 됩니다.</p><p><code>config/app.php</code> 파일의 <code>providers</code> 배열에 주석 처리 되어있는 부분을 주석 해제 하겠습니다.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;providers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
    <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>AppServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>AuthServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token comment">// App\\Providers\\BroadcastServiceProvider::class, // 이 부분 주석 해제</span>
    <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>EventServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>RouteServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="env-파일에-pusher-앱-정보-기입" tabindex="-1"><a class="header-anchor" href="#env-파일에-pusher-앱-정보-기입" aria-hidden="true">#</a> <code>.env</code> 파일에 <code>Pusher</code> 앱 정보 기입</h3><p>기본적으로 <code>Broadcast Driver</code>가 <code>log</code>로 설정되어 있습니다.</p><p>우리는 이미 정의되어있는 <code>pusher</code> 드라이버를 사용할 것이므로 <code>.env</code> 파일에서 드라이버를 변경해줍니다.</p><div class="language-dotenv line-numbers-mode" data-ext="dotenv"><pre class="language-dotenv"><code>BROADCAST_DRIVER=pusher
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>위에서 <code>Pusher</code> 앱을 만든 뒤 확인한 값들을 <code>.env</code> 파일에 기입합니다.</p><div class="language-dotenv line-numbers-mode" data-ext="dotenv"><pre class="language-dotenv"><code>PUSHER_APP_ID=&lt;YOUR_PUSHER_APP_ID&gt;
PUSHER_APP_KEY=&lt;YOUR_PUSHER_APP_KEY&gt;
PUSHER_APP_SECRET=&lt;YOUR_PUSHER_APP_SECRET&gt;
PUSHER_APP_CLUSTER=&lt;YOUR_PUSHER_APP_CLUSTER&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),R=a("code",null,"Laravel",-1),A=a("code",null,"Pusher",-1),S=a("code",null,".env",-1),D=a("code",null,"Pusher",-1),B=a("br",null,null,-1),U=a("code",null,"config/broadcasting.php",-1),L={href:"https://laravel.kr/docs/8.x/configuration",target:"_blank",rel:"noopener noreferrer"},O=s(`<h3 id="pusher-php-sdk-설치" tabindex="-1"><a class="header-anchor" href="#pusher-php-sdk-설치" aria-hidden="true">#</a> <code>Pusher</code> PHP SDK 설치</h3><p>우리의 <code>Laravel</code> 프로젝트에서 <code>Pusher</code> 앱에 요청을 보내기 위해 <code>Pusher</code>에서 제공해주는 SDK를 설치해야합니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require pusher/pusher-php-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>위 패키지까지 설치했으면, Pusher를 사용하기 위한 사전준비는 끝났습니다. 이제 본격적으로 채팅 서비스를 위한 코드를 작성할 시간입니다.</p>`,4);function C(y,N){const n=c("ExternalLinkIcon");return r(),i("div",null,[p,u,t(" more "),a("div",v,[h,a("p",null,[e("(윈도우 환경에서는 패키지 매니저인 "),m,e("를 사용하여 설치하는 것을 추천합니다. "),a("a",_,[e("참고"),o(n)]),e(")")])]),b,a("p",null,[e("필수적인 기본 설정을 끝났습니다. 아래 명령으로 마이그레이션을 실행하고, 개발 서버를 실행시켜 "),g,e("의 동작을 확인합니다."),P,e(" (php artisan serve 명령은 기본적으로 "),a("a",k,[e("http://127.0.0.1:8000"),o(n)]),e(" 에 개발용 서버를 실행합니다.)")]),f,a("p",null,[a("a",x,[e("Pusher 사이트"),o(n)]),e("에 접속하여 로그인합니다. 깃허브/구글 로그인을 지원하니까 참고하세요.")]),E,a("p",null,[R,e(" 공식문서에서 Real-Time 솔루션으로 "),A,e("를 권장하기 때문에 기본적으로 "),S,e(" 하단에 "),D,e(" 관련 설정값 부분이 있습니다. 해당 부분에 값들을 기입만 해주면 됩니다."),B,e(" (이 값들은 "),U,e(" 에서 사용됩니다. "),a("a",L,[e("자세한 내용은 참고"),o(n)]),e(")")]),O])}const H=d(l,[["render",C],["__file","2.html.vue"]]);export{H as default};
