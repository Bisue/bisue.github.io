<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://bisue.github.io/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://bisue.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>비수의 개발 창고</title>
    <link>https://bisue.github.io/</link>
    <description>잡다한 개발 경험을 담은 블로그</description>
    <language>ko-KR</language>
    <pubDate>Wed, 14 Feb 2024 15:09:41 GMT</pubDate>
    <lastBuildDate>Wed, 14 Feb 2024 15:09:41 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <image>
      <title>비수의 개발 창고</title>
      <url>https://bisue.github.io/logo.svg</url>
      <link>https://bisue.github.io/</link>
    </image>
    <category>개발 팁</category>
    <category>NPM 라이브러리 배포</category>
    <category>개발 일기</category>
    <category>실시간 채팅 앱 만들기 (Pusher)</category>
    <item>
      <title>#1 [Node] SSL unsafe legacy renegotiation</title>
      <link>https://bisue.github.io/posts/tips/1-SSL-unsafe-legacy-renegotiation.html</link>
      <guid>https://bisue.github.io/posts/tips/1-SSL-unsafe-legacy-renegotiation.html</guid>
      <source url="https://bisue.github.io/rss.xml">#1 [Node] SSL unsafe legacy renegotiation</source>
      <description>#1 [Node] SSL unsafe legacy renegotiation 문제 프로젝트를 진행하던 중에 다른 팀원이 Node 16 환경에서 개발하고 테스트 한 크롤링 부분이 Node 18 환경인 내 노트북에서 아래와 같은 에러 메세지를 출력하며 동작이 되지 않았다.</description>
      <category>개발 팁</category>
      <pubDate>Sun, 12 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> #1 [Node] SSL unsafe legacy renegotiation</h1>
<h3> 문제</h3>
<p>프로젝트를 진행하던 중에 다른 팀원이 <code>Node 16</code> 환경에서 개발하고 테스트 한 크롤링 부분이 <code>Node 18</code> 환경인 내 노트북에서 아래와 같은 에러 메세지를 출력하며 동작이 되지 않았다.</p>
<!-- more -->
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 찾기</h3>
<p>구글링 해보니, Node 17 이상 (추정) 에서부터 대상 서버의 SSL이 <code>Renegotiation Indication Extension (RFC 5746)</code> 표준을 지키지 않아 <code>man-in-the-middle attacks (CVE-2009-3555)</code> 취약점이 존재하면 https 연결을 거부하는 듯 했다.</p>
<p>정석적인 해결 방법은 해당 서버의 SSL을 교체하는 것이지만 지금은 내가 관리하지 못하는 다른 사이트를 크롤링 하는 것이고, 단순히 GET 요청을 하고 html을 파싱하는 프로세스기 때문에 이를 무시하고 정상적으로 요청을 보내도록 처리해주어야 했다.</p>
<p>방법을 찾아보니 대부분이 해당 동작을 무시하는 Node 환경 변수를 넣어주거나 노드 버전을 16으로 다운그레이드 하는 방법을 소개했었는데, Node 환경 변수는 Node 18 버전 이후 동작하지 않는 것 같았고, 단순히 노드 버전을 16으로 다운그레이드하는 방법은 당장은 돌아가겠지만, 배포 환경이나 이후 Node 버전에서의 동작을 생각해보면 나쁜 해결책인 듯 했다.</p>
<h3> 해결</h3>
<p>코드 수준에서 작용 범위를 내가 정할 수 있는 해결 방법을 찾아보다가, 현재 프로젝트에서 사용 중인 http 클라이언트인 <code>axios</code> 에서 <code>httpsAgent</code> 옵션을 커스터마이징 할 수 있는 옵션을 제공하는 걸 확인했고, 여기서 <code>secureOptions</code> 을 <code>crypto</code> 라이브러리의 <code>SSL_OP_LEGACY_SERVER_CONNECT</code> 값으로 설정해주니 동작했다.</p>
<p>프로젝트에서 보내는 모든 요청이 SSL 문제가 생긴 그 사이트 하나만을 대상으로 하기 때문에, axios 인스턴스를 따로 만들지는 않고 엔트리 포인트에서 전역적으로 설정해주었다.</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>NPM 라이브러리 배포 - 1) 독립형</title>
      <link>https://bisue.github.io/posts/npm-deployment/1-NPM-deployment-1.html</link>
      <guid>https://bisue.github.io/posts/npm-deployment/1-NPM-deployment-1.html</guid>
      <source url="https://bisue.github.io/rss.xml">NPM 라이브러리 배포 - 1) 독립형</source>
      <description>NPM 라이브러리 배포 - 1) 독립형 개요 NPM 라이브러리 배포에 관심이 생겨, 배포하려는 라이브러리의 유형별로 배포 프로세스를 나름대로 정리하여 기록하려고 한다.</description>
      <category>NPM 라이브러리 배포</category>
      <pubDate>Thu, 26 Oct 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> NPM 라이브러리 배포 - 1) 독립형</h1>
<h2> 개요</h2>
<p>NPM 라이브러리 배포에 관심이 생겨, 배포하려는 라이브러리의 유형별로 배포 프로세스를 나름대로 정리하여 기록하려고 한다.</p>
<!-- more -->
<p>개인적인 분류 체계를 두어 라이브러리의 유형을 크게 두 가지로 나누어 구분하려고 한다.</p>
<ol>
<li>독립형
<ul>
<li>다른 기반 패키지 없이 홀로 동작할 수 있는 라이브러리</li>
</ul>
</li>
<li>종속형
<ul>
<li>다른 기반 패키지 위에서 동작하도록 작성된 라이브러리</li>
</ul>
</li>
</ol>
<p>이번 포스팅에서는 간단한 함수 몇 개가 포함된 독립형 모듈을 라이브러리화하여 배포하는 프로세스를 정리한다.</p>
<p>배포된 라이브러리는 <code>ESM</code> 및 <code>CommonJS</code>를 지원하고, <code>Typescript</code>를 지원하도록 구성할 것이다.</p>
<div class="hint-container note">
<p class="hint-container-title">참고한 글</p>
<p><a href="https://junghyeonsu.com/posts/deploy-simple-util-npm-library/" target="_blank" rel="noopener noreferrer">간단한 유틸 함수 NPM 라이브러리 배포해보기 (feat. TypeScript 지원, ESM 지원)</a></p>
</div>
<h2> 목차</h2>

<h2> 사전 준비</h2>
<p>본격적으로 라이브러리를 작성하고 배포하기 전 필요한 몇가지 단계가 있다.</p>
<h3> NPM 계정 준비</h3>
<p>NPM 패키지 매니저에 우리가 작성할 라이브러리를 배포할 것이므로, 배포의 주체가 될 NPM 계정을 준비해야 한다.</p>
<p>NPM 공식 홈페이지에서 일반적인 회원가입처럼 가입할 수 있다.</p>
<p><a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">NPM</a></p>
<div class="hint-container info">
<p class="hint-container-title">Public vs Private</p>
<figure><figcaption>NPM Pricing</figcaption></figure>
<p>일반적으로 NPM 을 생각하면 Public 라이브러리만 떠오르지만, Private 라이브러리도 배포 가능하다.</p>
<p>다만, 기본적으로 Pullic 라이브러리 배포는 무제한 무료지만 Private 라이브러리를 배포하려면 Pro 이상의 라이센스를 구매해야 한다.</p>
<p><a href="https://www.npmjs.com/products" target="_blank" rel="noopener noreferrer">NPM Pricing</a></p>
</div>
<!-- ::: info 일반 유저 vs 조직
[NPM 문서](https://docs.npmjs.com/organizations)
::: -->
<h3> Node 개발 환경 준비</h3>
<p>Node 기반 NPM 라이브러리를 배포할 계획이므로, Node 개발 환경이 필요하다.</p>
<p>본 포스팅에서는 다음과 같은 환경을 사용한다.</p>
<ul>
<li>Windows 11</li>
<li>Node <code>v18.12.1</code></li>
<li>NPM <code>v8.19.2</code></li>
</ul>
<h2> 라이브러리 작성</h2>
<p>사전 준비를 마쳤으면, 본격적으로 라이브러리를 작성해본다.</p>
<h3> NPM Init</h3>
<p>개발할 라이브러리를 위한 디렉토리를 생성하고 해당 디렉토리로 이동한다.</p>
<div class="language-bash" data-ext="sh"></div><p>라이브러리를 배포하려면 라이브러리의 이름, 버전 등의 해당 라이브러리에 대한 정보가 필요하다. 이들을 설정하기 위해서는 package.json 파일에 해당 정보를 기재하면 된다.</p>
<p>package.json 파일을 직접 만들 수도 있지만, npm init 명령을 통해 만들 수도 있다. npm init 명령을 통해 기본 package.json 파일을 생성한다.</p>
<div class="language-bash" data-ext="sh"></div><div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>생성된 package.json 파일의 내용을 입맛대로 바꾼다. 현재는 사용하지 않는 프로퍼티는 삭제하고 적절하게 수정한다.</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="highlight-lines"><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info">
<p class="hint-container-title">Semantic Versioning</p>
<figure><figcaption>Semantic Versioning(<a href="https://commons.wikimedia.org/wiki/File:SemanticVersioning.png" target="_blank" rel="noopener noreferrer">https://commons.wikimedia.org/wiki/File:SemanticVersioning.png</a>)</figcaption></figure>
<p>NPM에서의 버전은 Semantic Versioning을 따르는 것을 권장하고 있다.</p>
<p><code>.</code>으로 구분된 3가지 숫자는 뒤에서부터 Patch, Minor, Major 버전이다. 각 버전의 숫자는 아래와 같은 변경 사항이 발생할 때마다 대응되는 버전의 숫자를 증가시키고, 하위 버전의 숫자를 0으로 초기화하며 업데이트한다.</p>
<ul>
<li>Patch: (이전 버전과 호환 가능한) 버그 픽스</li>
<li>Minor: (이전 버전과 호환 가능한) 기능 추가</li>
<li>Major: (이전 버전과 호환 불가능한) 변경 사항</li>
</ul>
<p><a href="https://semver.org/lang/ko/" target="_blank" rel="noopener noreferrer">Semantic Versioning</a> <a href="https://docs.npmjs.com/about-semantic-versioning" target="_blank" rel="noopener noreferrer">NPM Semantic Versioning</a></p>
</div>
<h3> 코드 작성</h3>
<p>이제 라이브러리화 하려는 모듈의 코드를 작성한다.</p>
<p>라이브러리 디렉토리 내에서 어느 경로에 작성해도 상관없지만, 편의를 위해 소스코드를 모아두는 src/ 디렉토리를 만들어 해당 디렉토리 내부에 모듈 코드를 작성하겠다.</p>
<p>이번 포스팅에서는 <code>add</code>, <code>subtract</code>, <code>multiply</code>, <code>divide</code>의 4가지 간단한 함수를 포함한 모듈을 예시로 작성한다.</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 로컬 배포 및 테스트</h3>
<p>개요에서 언급했던 아래 조건을 무시하면, 사실 라이브러리 배포를 위한 필수 조건은 다 갖추었다.</p>
<blockquote>
<p>배포된 라이브러리는 <code>ESM</code> 및 <code>CommonJS</code>를 지원하고, <code>Typescript</code>를 지원하도록 구성할 것이다.</p>
</blockquote>
<p>그럼 현재 상태로 그냥 배포하면 안되는 걸까?</p>
<p>실제로 테스트 해보자. NPM에 배포하지 않아도 로컬에서 개발한 패키지를 사용해볼 수 있다.</p>
<p>모듈 디렉토리에서 다음 명령을 실행하여 NPM의 global 라이브러리가 설치된 폴더에 현재 폴더의 symbolic link를 생성한다.</p>
<div class="language-bash" data-ext="sh"></div><div class="hint-container note">
<p class="hint-container-title">npm link 이해하기</p>
<p>npm link의 동작 방식을 좀 더 알아보고 싶다면 아래 글에 잘 정리되어 있다.</p>
<p><a href="https://medium.com/dailyjs/how-to-use-npm-link-7375b6219557" target="_blank" rel="noopener noreferrer">Understanding npm-link</a></p>
</div>
<p>이제 우리의 라이브러리를 사용할 클라이언트 단 코드를 작성해보자.</p>
<p>임의의 다른 디렉토리로 이동하고 package.json 을 작성한다.</p>
<div class="language-bash" data-ext="sh"></div><div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이후 아래 명령을 통해 앞서 생성한 라이브러리를 의존성에 추가한다.</p>
<div class="language-bash" data-ext="sh"></div><p>테스트를 위해 라이브러리를 사용하는 클라이언트 코드를 작성한다.</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>작성한 클라이언트 코드를 실행하여 라이브러리가 잘 동작하는지 확인한다.</p>
<div class="language-bash" data-ext="sh"></div><div class="language-bash" data-ext="sh"></div><p>잘 동작한다! 그러나 지금의 라이브러리는 문제가 많이 존재한다.</p>
<p>지금의 상황은 라이브러리 내 모듈이 CommonJS 방식으로 export 하고, 클라이언트도 CommonJS 방식으로 import 하는 방식이다.</p>
<p>그렇다면 클라이언트가 일반적으로 많이 사용하는 ESM 방식으로 import 하면 어떻게 될까?</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="highlight-lines"><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="highlight-lines"><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash" data-ext="sh"></div><p>역시 잘 동작한다!</p>
<p>그러면 이제 라이브러리 디렉토리로 돌아와서, export 방식을 ESM으로 변경해보자.</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다시 클라이언트 디렉토리로 돌아와서 실행해보자.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash" data-ext="sh"></div><p>잘 동작한다.</p>
<p>마지막으로 클라이언트를 다시 CommonJS 방식으로 바꿔보자.</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-ext="sh"></div><div class="language-plaintext" data-ext="plaintext"></div><p>이번에는 오류가 발생한다!</p>
<p>위 케이스들을 정리하면 다음과 같다.</p>
<table>
<thead>
<tr>
<th>라이브러리</th>
<th>클라이언트</th>
<th>결과</th>
</tr>
</thead>
<tbody>
<tr>
<td>CommonJS export</td>
<td>CommonJS import</td>
<td>O</td>
</tr>
<tr>
<td>CommonJS export</td>
<td>ESM import</td>
<td>O</td>
</tr>
<tr>
<td>ESM export</td>
<td>ESM import</td>
<td>O</td>
</tr>
<tr>
<td>ESM export</td>
<td>CommonJS import</td>
<td>X</td>
</tr>
</tbody>
</table>
<p>요약하면 라이브러리 내부 코드에서 ESM을 사용하면 CommonJS를 사용하는 클라이언트를 지원할 수 없게 된다.</p>
<p>따라서 라이브러리 내부에서 ESM을 사용하고 싶다면, 추가적인 작업이 필요하다.</p>
<h2> ESM 및 CommonJS 지원</h2>
<p>라이브러리가 ESM과 CommonJS 방식의 클라이언트를 모두 지원하기 위해서는 CommonJS 방식의 export를 사용하는 파일, ESM 방식의 export를 사용하는 파일을 별도로 두고 package.json에 <code>exports</code> 프로퍼티로 명시해주어야 한다.</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="highlight-lines"><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="highlight-lines"><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>exports</code> 프로퍼티는 다음과 같이 구성된다.</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SUB_PATH</code>는 라이브러리를 import 할 때 <code>라이브러리명/SUB_PATH</code> 처럼 경로를 지정할 때 사용된다. 현재 라이브러리는 별도의 서브 경로를 두지 않을 것이므로 현재 디렉토리를 나타내는 <code>.</code>을 사용한다.</p>
<p><code>types</code>는 이후 타입스크립트 지원을 추가할 때 <code>d.ts</code> 파일의 경로를 지정하는데 사용된다. 이 단계에서는 사용하지 않는다.</p>
<p><code>import</code>는 ESM 방식의 export를 사용하는 파일 경로를 지정하는데 사용된다.</p>
<p><code>require</code>는 CommonJS 방식의 export를 사용하는 파일 경로를 지정하는데 사용된다. 일반적으로 <code>.cjs</code> 확장자를 사용한다.</p>
<div class="hint-container note">
<p class="hint-container-title">exports 더 알아보기</p>
<p>exports에 사용할 수 있는 프로퍼티는 더 많이 있다. 더 알아보고 싶다면 아래 문서를 참고하면 좋다.</p>
<p><a href="https://nodejs.org/api/packages.html#conditional-exports" target="_blank" rel="noopener noreferrer">Node - Conditional Exports</a></p>
</div>
<p>이제 우리의 라이브러리는 CommonJS와 ESM 방식 모두 사용가능하다.</p>
<p>다만 CommonJS 방식과 ESM 방식의 코드를 모두 직접 관리해야 하는 점이 마음에 걸린다.</p>
<p>이 부분은 타입스크립트 지원을 추가하면서 동시에 해결해본다.</p>
<h2> 타입스크립트 지원</h2>
<p>현재 우리의 라이브러리는 타입스크립트를 사용하는 클라이언트에서 사용할 수 없다.</p>
<p>상황을 파악해보기 위해 타입스크립트 환경의 클라이언트를 구성해보자.</p>
<p>이전에 만들어놓았던 클라이언트 디렉토리로 이동하여 타입스크립트 환경을 구성한다.</p>
<div class="language-bash" data-ext="sh"></div><div class="language-json line-numbers-mode" data-ext="json"><div class="highlight-lines"><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><div class="highlight-lines"><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-ext="sh"></div><div class="language-plaintext" data-ext="plaintext"></div><p>현재 우리의 라이브러리는 타입과 관련된 정보를 전달하는 파일이 존재하지 않아 타입스크립트 환경에서 사용하면 문제가 발생한다.</p>
<h3> 타입 정보(d.ts) 추가</h3>
<p>타입 정보를 추가하기 위해, 라이브러리 디렉토리로 이동하여 타입스크립트를 의존성에 추가한다. 추가로 node 내장 모듈의 타입도 같이 추가한다.</p>
<div class="language-bash" data-ext="sh"></div><p>이어서 tsconfig.json 파일도 추가해준다.</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>라이브러리의 코드를 타입스크립트로 변경한다.</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="highlight-lines"><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>package.json에 빌드 스크립트를 추가하고, 실행한다.</p>
<p>prepack 스크립트는 NPM 배포 명령인 npm publish 명령 실행 시 자동으로 실행되는 명령이다.</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="highlight-lines"><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-ext="sh"></div><p>package.json의 main 및 exports 프로퍼티의 경로를 수정한다.</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="highlight-lines"><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 타입스크립트 지원이 추가되었다.</p>
<p>하지만 현재는 ESM으로만 컴파일되고, CommonJS는 따로 관리된다. 통합적으로 관리할 수 있도록 설정해보자.</p>
<h3> 타입스크립트 -&gt; ESM/CommonJS</h3>
<h4> 1) ESBuild</h4>
<p>하나의 타입스크립트 파일로부터 ESM 및 CommonJS 방식의 js 파일을 컴파일 하는 방법은 다양하다.</p>
<p>본 포스팅에서는 ESBuild를 사용하여 컴파일 프로세스를 구성해본다.</p>
<p>이를 위해 먼저 ESBuild를 라이브러리의 devDependencies에 추가한다.</p>
<div class="language-bash" data-ext="sh"></div><p>이후 다소 복잡한 빌드 프로세스를 CLI 대신 스크립트 파일로 관리하기 위해 <code>build.js</code> 파일을 생성하여 작성한다.</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>스크립트를 살펴보면, <code>baseConfig</code>는 CommonJS와 ESM 방식의 컴파일 모두에서 사용할 ESBuild 옵션을 설정하고 있다.</p>
<p><code>entryPoints</code> 옵션은 컴파일을 시작할 시작점이 될 스크립트들을 지정한다.<br>
<code>outdir</code> 옵션은 컴파일이 끝난 js 파일이 저장될 경로를 지정한다.<br>
<code>bundle</code> 옵션은 각 파일에서 import로 사용한 코드들을 모두 inline 형태로 가져와 단일 파일에 저장하는 기능의 활성화 여부를 지정한다. 기본값은 <code>false</code> 이다.<br>
<code>sourcemap</code> 옵션은 각 결과 파일의 소스맵을 생성하는 기능의 활성화 여부를 지정한다.</p>
<p>이후 <code>build</code> 메서드를 이용하여 CommonJS, ESM 방식의 컴파일을 총 2번 진행한다. 해당 메서드는 Promise를 반환하므로 두 빌드가 모두 완료될 때 까지 대기하기 위해 <code>Promise.all</code> 메서드로 대기한다.</p>
<p>CommonJS 빌드에서는 <code>format</code> 옵션을 <code>cjs</code>로 설정해주고, 결과물의 확장자를 <code>.cjs</code>로 변경한다.</p>
<p>ESM 빌드에서는 <code>format</code> 옵션을 <code>esm</code>으로 설정한다.</p>
<p>빌드 스크립트 작성이 완료되었으므로, 이를 이용하여 라이브러리를 빌드하는 스크립트를 <code>package.json</code>에 추가한다.</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><div class="highlight-line">&nbsp;</div><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br><br><br><br><br><div class="highlight-line">&nbsp;</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>빌드를 진행하기 전 이전 빌드 결과물을 모두 삭제하여 깨끗한 빌드를 수행하기 위해 <code>clean</code> 스크립트를 추가하였다. 이때, 운영체제에 독립적인 동작을 위해 <code>rimraf</code> 라이브러리를 <code>devDependencies</code>에 추가하여 사용한다.</p>
<div class="language-bash" data-ext="sh"></div><p>또한 현재 ESBuild는 타입 정보인 <code>d.ts</code> 컴파일을 지원하지 않기 때문에 CommonJS, ESM 방식 <code>js</code> 파일 생성을 위해서는 ESBuild를 사용하되, <code>d.ts</code> 생성을 위해서는 기존 tsc를 사용해야 한다.</p>
<p>따라서 기존 <code>build:tsc</code> 스크립트는 <code>emitDeclarationOnly</code> 옵션을 추가하여 타입 정보만 컴파일하도록 수정한 뒤, 앞서 작성한 build.js 파일을 실행하여 ESBuild 컴파일을 진행하는 build:js 스크립트를 추가한다.</p>
<p>이후 <code>clean</code> 스크립트를 수행하여 <code>dist</code> 디렉토리를 삭제한 뒤, <code>build:tsc</code>와 <code>build:js</code> 스크립트를 모두 수행하는 <code>build</code> 스크립트를 추가한다.</p>
<p><code>prepack</code> 스크립트는 패키지를 압축하는 <code>npm pack</code>, <code>npm publish</code> 스크립트가 실행되기 전 자동으로 실행되는 스크립트이다.</p>
<p>마지막으로 CommonJS 파일의 경로를 지정하는 <code>exports</code>의 <code>require</code> 옵션을 기존 <code>src</code> 내 <code>.cjs</code> 파일에서 생성할 <code>dist</code>의 <code>.cjs</code> 파일로 변경한다. <code>src</code> 경로 내 존재했던 <code>.cjs</code> 파일은 더 이상 필요없으니 삭제한다.</p>
<p>스크립트 추가가 완료되었으면 <code>build</code> 스크립트를 실행하여 컴파일이 잘 수행되는지 확인한다.</p>
<div class="language-bash" data-ext="sh"></div><figure><figcaption>dist 폴더</figcaption></figure>
<p>CommonJS, ESM, 소스맵, 타입 정보가 모두 생성됨을 확인할 수 있다.</p>
<h4> 2) Others</h4>
<p>(ESBuild 이외의 가능한 방법에 대해 작성중)</p>
<h3> NPM 배포</h3>
<p>이제 모든 준비가 끝났다.</p>
<p>NPM에 배포하기 전 <code>package.json</code>에서 마지막으로 설정해줘야 할 옵션이 있다.</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>files</code> 옵션은 배포될 NPM 패키지에 포함될 파일/폴더를 지정해주는 옵션이다. <code>dist</code> 폴더는 당연히 포함되어야 하고, <code>src</code> 폴더는 원본 소스 코드를 확인하고자 하는 사용자를 위해 포함한다.</p>
<p>이제 드디어 NPM에 배포를 진행한다.</p>
<p>배포 전, 가장 처음에 만들었던 NPM 계정으로 로그인을 해야한다.</p>
<div class="language-bash" data-ext="sh"></div><p>로그인 한 뒤, 다음 명령을 통해 배포한다.</p>
<div class="hint-container info">
<p class="hint-container-title">버전 업</p>
<p>배포 전 버전을 수정하려면 package.json에서 직접 변경해도 되지만, 명령어를 통해서 쉽게 변경할 수도 있다.</p>
<div class="language-bash" data-ext="sh"></div></div>
<div class="language-bash" data-ext="sh"></div><p>NPM 배포가 완료되었다!</p>
<p>이제 NPM 홈페이지에 로그인하면 자신이 배포한 라이브러리를 확인할 수 있고, 다른 NPM 라이브러리처럼 설치할 수 있다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>나의 첫 번째 오픈 소스 컨트리뷰트 (vuepress-theme-hope)</title>
      <link>https://bisue.github.io/posts/dairy/1-first-contribution-to-open-source-project.html</link>
      <guid>https://bisue.github.io/posts/dairy/1-first-contribution-to-open-source-project.html</guid>
      <source url="https://bisue.github.io/rss.xml">나의 첫 번째 오픈 소스 컨트리뷰트 (vuepress-theme-hope)</source>
      <description>나의 첫 번째 오픈 소스 컨트리뷰트 (vuepress-theme-hope) vuepress-theme-hope 한국어 지원 관련 문제 지금 보고 있는 이 블로그를 만들기 위해 사용했던 vuepress-theme-hope 테마를 사용하던 중에, 테마 설정에서 언어를 한국어로 바꿨음에도 게시글의 &amp;apos;작성일&amp;apos; 부분이 영어 포맷으로 출력되고 있었다.</description>
      <category>개발 일기</category>
      <pubDate>Mon, 27 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 나의 첫 번째 오픈 소스 컨트리뷰트 (vuepress-theme-hope)</h1>
<h2> vuepress-theme-hope</h2>
<h3> 한국어 지원 관련 문제</h3>
<p>지금 보고 있는 이 블로그를 만들기 위해 사용했던 vuepress-theme-hope 테마를 사용하던 중에,<br>
테마 설정에서 언어를 한국어로 바꿨음에도 게시글의 '작성일' 부분이 영어 포맷으로 출력되고 있었다.</p>
<!-- more -->
<h3> 문제 해결과 첫 오픈소스 PR</h3>
<p>테마 설정을 뭔가 빠뜨린게 있나 싶어서 한참을 구글링 했었는데 이 테마를 사용하는 한국인이 나 하나뿐인지 관련된 글은 찾을 수 없었다..</p>
<p>어쩔 수 없이 직접 작성일을 출력해주는 부분의 테마 코드를 거꾸로 타서 올라가 본 결과,<br>
테마 내부 코드 중에 dayjs locale을 로딩하는 부분에 한국어 locale object 부분이 빠져있었다.<br>
아무래도 테마 개발자가 실수로 빠뜨렸는데, 한국인 사용자가 없어서 아직 못 찾았던 듯 하다.</p>
<p>부랴부랴 한국어 dayjs locale object를 추가하고 짧은 영어로 번역기 돌려가며 떠듬떠듬 PR을 남겼다.<br>
(PR 템플릿이 따로 있나 찾아봤는데 해당 레포지토리에서는 따로 없는 것 같았다. 적당히 예쁘게 나눠서 적었다..)</p>
<figure><figcaption>나의 첫 Pull Request</figcaption></figure>
<p>밤 늦게 PR을 올려서 내일 쯤에 확인하려 했는데 바로 댓글이 달렸다.<br>
나중에 보니 테마 개발자가 중국인 개발자 분이였는데 시간대가 우리나라보다 1시간 느렸었다.</p>
<figure><figcaption>테마 개발자 댓글</figcaption></figure>
<p>테마의 한국어 i18n이 번역기로 만들었었나보다.<br>
이 블로그를 만들 때도 약간 어색한 텍스트가 있어서 설정 파일에서만 수정해서 쓰고 있었는데,<br>
테마 개발자가 댓글로 어색한 부분을 고쳐달라고 해서 내가 쓰던 부분을 원본 테마에도 추가로 수정해서 커밋했다.</p>
<h3> 머지 완료!</h3>
<figure><figcaption>머지 완료!</figcaption></figure>
<p>테마 개발자가 리뷰 해준 뒤에 이것저것 테스트랑 린터가 돌아가더니 내 PR이 머지되었다!</p>
<p>라이브러리 레포지토리 돌아다니면서 README Contributors에 올라가있는 사람들을 보면 뭔가 멋있어 보였는데,<br>
내가 쓰는 오픈 소스 프로젝트에 쪼매난 i18n 지원 일부 수정이지만 PR을 보내고 머지된 걸 보니 나름 뿌듯하다.</p>
<p>이제 블로그 테마는 못 바꿀 것 같다.</p>
<h3> Contributor Rocks</h3>
<p>vuepress-theme-hope README 내 Contributors에 처음으로 내 프로필이 전시되었다!</p>
<figure><figcaption>Contributors</figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #1 (w/ Laravel, Nuxt)</title>
      <link>https://bisue.github.io/posts/pusher-chat-app/1.html</link>
      <guid>https://bisue.github.io/posts/pusher-chat-app/1.html</guid>
      <source url="https://bisue.github.io/rss.xml">Pusher 를 이용한 실시간 채팅 웹앱 만들기 #1 (w/ Laravel, Nuxt)</source>
      <description>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #1 (w/ Laravel, Nuxt) Pusher Logo Pusher? 채팅 서비스나 구글 Docs의 동시 문서편집 같이 웹 페이지를 통해 클라이언트들이 실시간으로 상호작용을 해야 하는 기능을 깔끔하게 개발하려면 웹소켓을 사용해야 합니다.</description>
      <category>실시간 채팅 앱 만들기 (Pusher)</category>
      <pubDate>Sat, 10 Jul 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Pusher 를 이용한 실시간 채팅 웹앱 만들기 #1 (w/ Laravel, Nuxt)</h1>
<figure><img src="https://images.velog.io/images/bdu00chch/post/1931db79-06f1-41c0-a400-c63ead2bcfbc/PUSHER.png" alt="Pusher Logo" tabindex="0" loading="lazy"><figcaption>Pusher Logo</figcaption></figure>
<h2> <code>Pusher</code>?</h2>
<p>채팅 서비스나 구글 Docs의 동시 문서편집 같이 웹 페이지를 통해 클라이언트들이 실시간으로 상호작용을 해야 하는 기능을 깔끔하게 개발하려면 웹소켓을 사용해야 합니다.</p>
<!-- more -->
<p>웹소켓을 사용하려면, 직접 웹소켓 서버를 구현해야 하는데 이 과정이 복잡하고 최종적으로 완성할 서비스에 비해 웹소켓 구현만을 위한 개발시간이 과도하게 사용될 수 있습니다.</p>
<p><code>Pusher</code>는 이러한 상황에서 서버-클라이언트 간 실시간 통신에 필요한 기능들을 미리 구현해 API와 플랫폼/언어별 라이브러리로 제공하는 <code>Real-Time Communication</code> 솔루션입니다.</p>
<p>이 <code>Pusher</code>를 사용하면 실시간 통신이 필요한 기능들을 내 서비스의 비즈니스 로직만 신경 써서 쉽고 간단하게 구현할 수 있습니다.</p>
<p><a href="https://pusher.com/channels" target="_blank" rel="noopener noreferrer">Pusher Website</a></p>
<h2> 실시간 채팅 서비스</h2>
<p>이번 시리즈에서는 <code>Laravel</code>, <code>Vue</code>, 그리고 <code>Pusher</code>를 사용해서 실시간 채팅 서비스를 만들어보겠습니다.</p>
<p>백엔드 프레임워크로는 러닝 커브가 상대적으로 완만하고 빌트인 기능이 비교적 많은 <code>Laravel</code>을 쓰고, 프론트엔드 프레임워크는 <code>Vue</code>와 <code>Nuxt</code>를 사용하겠습니다. 기타 사용하는 라이브러리들은 포스팅 하단에 목록으로 정리해두겠습니다.</p>
<div class="hint-container warning">
<p class="hint-container-title">경고</p>
<p>본 시리즈에서는 <code>Nuxt 2</code>, <code>Laravel 8</code>을 사용하였습니다.</p>
<p>이후 버전을 사용하는 경우 API가 달라질 수 있습니다.</p>
</div>
<p>처음에는 '채팅 프로그램' 의 가장 필수적인 기능들만 개발하여 서버에 배포해보고, 점차 기능들을 추가해나가며 완성형의 채팅 서비스를 만들 예정입니다.</p>
<p>이 과정에서 배포 방식도 <code>Container</code>와 <code>Kubernetes</code>를 사용하는 방식으로 점차 바꾸어보고, 동시에 마이크로서비스 구조로 바꾸어보겠습니다.</p>
<hr>
<h2> 사용 프레임워크 &amp; 라이브러리</h2>
<h3> 프론트엔드</h3>
<ul>
<li><code>Vue 2</code> &amp; <code>Nuxt 2</code></li>
<li><code>Tailwind CSS</code></li>
<li><code>Laravel Echo</code></li>
</ul>
<h3> 백엔드</h3>
<ul>
<li><code>Laravel</code></li>
<li><code>Pusher</code></li>
</ul>
<h3> 배포 환경</h3>
<ul>
<li><code>GCP</code> (Google Cloud Platform)</li>
<li><code>Kubernetes</code></li>
</ul>
]]></content:encoded>
      <enclosure url="https://images.velog.io/images/bdu00chch/post/1931db79-06f1-41c0-a400-c63ead2bcfbc/PUSHER.png" type="image/png"/>
    </item>
    <item>
      <title>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #2 (w/ Laravel, Nuxt)</title>
      <link>https://bisue.github.io/posts/pusher-chat-app/2.html</link>
      <guid>https://bisue.github.io/posts/pusher-chat-app/2.html</guid>
      <source url="https://bisue.github.io/rss.xml">Pusher 를 이용한 실시간 채팅 웹앱 만들기 #2 (w/ Laravel, Nuxt)</source>
      <description>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #2 (w/ Laravel, Nuxt) 이번 글에서는 Laravel 개발 환경을 설정하고, 새로운 Laravel 프로젝트를 하나 만들어 그 프로젝트 안에서의 기본 설정과 Pusher 와의 연동을 위한 환경설정을 하겠습니다.</description>
      <category>실시간 채팅 앱 만들기 (Pusher)</category>
      <pubDate>Sun, 11 Jul 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Pusher 를 이용한 실시간 채팅 웹앱 만들기 #2 (w/ Laravel, Nuxt)</h1>
<p>이번 글에서는 <code>Laravel</code> 개발 환경을 설정하고, 새로운 <code>Laravel</code> 프로젝트를 하나 만들어 그 프로젝트 안에서의 기본 설정과 <code>Pusher</code> 와의 연동을 위한 환경설정을 하겠습니다.</p>
<!-- more -->
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>기본적으로 <code>PHP</code>와 패키지 매니저인 <code>Composer</code>가 로컬 환경에 설치되어 있다고 가정하겠습니다. 혹시 <code>PHP</code>, <code>Composer</code>가 설치가 되어있지 않다면 본인의 플랫폼에 맞춰서 <code>PHP</code>와 <code>Composer</code>를 설치해주세요. 이후에 사용할 <code>MySQL</code>도 같이 설치해주세요.</p>
<p>(윈도우 환경에서는 패키지 매니저인 <code>Chocolatey</code>를 사용하여 설치하는 것을 추천합니다. <a href="https://wani.kr/posts/2016/07/29/window-enviroment-settings/" target="_blank" rel="noopener noreferrer">참고</a>)</p>
</div>
<figure><img src="https://images.velog.io/images/bdu00chch/post/4d6941bb-f21a-4a0d-ab35-65225115b472/1024px-Logo.min.svg.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> <code>Laravel</code> 프로젝트 만들기</h2>
<p>먼저, <code>Composer</code>를 통해 새로운 <code>Laravel</code> 프로젝트를 만들기 위해서 새 프로젝트를 만들고자 하는 디렉토리로 이동 후 <code>composer create-project laravel/laravel</code> 명령을 실행해주세요.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 기본 <code>Laravel</code> 프로젝트 설정</h2>
<h3> <code>.env</code> 파일 수정</h3>
<p>가장 먼저 <code>.env</code> 파일을 수정합니다. <code>.env</code> 파일은 <code>Laravel</code>에서 사용해야되는 값들 중, 개발/배포 환경에서 서로 달라야 하는 값이나 민감한 값들을 관리하기 위해서 사용되는 파일입니다.</p>
<p>이 파일에서 변경해야 될 값이 많지만, 여기서 지금 수정해야 될 부분은 데이터베이스 연결 관련 값들 입니다.</p>
<div class="language-dotenv line-numbers-mode" data-ext="dotenv"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여기서는 로컬 개발환경에서 사용할 데이터베이스가 로컬에 설치되어 기본 포트에서 동작하고 있다고 가정하겠습니다. 환경이 다르다면 위 값들을 적절하게 수정하면 됩니다.</p>
<h3> 데이터베이스 생성</h3>
<p><code>.env</code>의 <code>DB_DATABASE</code>에 설정한 DB 이름과 같은 데이터베이스를 만들겠습니다. 테이블은 만들지 않고 데이터베이스만 만듭니다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 마이그레이션 실행 및 구동 확인</h3>
<p>필수적인 기본 설정을 끝났습니다. 아래 명령으로 마이그레이션을 실행하고, 개발 서버를 실행시켜 <code>Laravel</code>의 동작을 확인합니다.<br>
(php artisan serve 명령은 기본적으로 <a href="http://127.0.0.1:8000" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8000</a> 에 개발용 서버를 실행합니다.)</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> <code>Pusher</code> 준비</h2>
<p><a href="https://pusher.com/" target="_blank" rel="noopener noreferrer">Pusher 사이트</a>에 접속하여 로그인합니다. 깃허브/구글 로그인을 지원하니까 참고하세요.</p>
<p>로그인하면 대시보드 페이지로 이동하는데, 여기서 <code>Channels</code>로 들어갑니다. 여기서 앱을 만들고 설정할 수 있는데, <code>Create App</code> 버튼을 누르고 아래처럼 정보를 입력하여 앱을 만듭니다.</p>
<figure><img src="https://images.velog.io/images/bdu00chch/post/705502d0-c30c-4e2c-a1c6-2a8ec7628a66/화면 캡처 2021-07-11 002036.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>만들 때 <code>Create apps for multiple environments?</code> 라는 옵션이 있는데, 이는 각기 다른 환경(개발/배포)에서의 <code>Pusher</code> 앱을 다르게 연결하려고 여러개의 앱을 자동으로 네이밍하여 만들어주는 옵션입니다.</p>
<p>여기서는 개발/배포 환경에 각각 다른 앱을 연결해 줄 예정이므로 체크하겠습니다.</p>
<p>아래의 프론트엔드, 백엔드 스택을 선택하는 부분이 있는데, 이는 앱을 만들고 나면 <code>Pusher</code>가 도움말을 제공해주는데, 스택에 맞춘 도움말을 제공하기 위한 부분입니다. 기본값 그대로 냅둬도 괜찮지만, 이왕 설정하는 김에 우리가 사용할 <code>Vue</code>, <code>Laravel</code>로 맞춰줍시다.</p>
<p>앱이 만들어지면, 앱 정보를 표시하는 페이지가 나타납니다. 여기서 왼쪽 메뉴 중 <code>App Keys</code> 메뉴를 눌러봅니다.</p>
<figure><img src="https://images.velog.io/images/bdu00chch/post/87dad409-6fae-4d1c-82df-19a0f0b445fb/화면 캡처 2021-07-11 002807.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>이 페이지는 백엔드, 프론트엔드에서 해당 <code>Pusher</code> 앱에 연결하기 위한 정보들이 표시되는 페이지입니다. 이 정보들만 있으면 누구라도 이 <code>Pusher</code> 앱에 연결하여 개발할 수 있습니다. 따라서 이 정보들은 다른 사람에게 노출되어선 안됩니다.</p>
<p>이 4가지 값들을 아래 <code>Pusher</code> 연동 부분에서 사용하겠습니다.</p>
<h2> <code>Pusher</code> 연동을 위한 준비</h2>
<p><code>Pusher</code>를 사용하기 위해 <code>Laravel</code>에서 설정해야하는 부분을 수정해보겠습니다.</p>
<h3> <code>BroadcastServiceProvider</code> 등록</h3>
<p><code>Laravel</code>의 <code>Event</code>를 웹소켓을 통해 클라이언트로 <code>Broadcast</code> 하려면 <code>Laravel</code>의 <code>BroadcastServiceProvider</code>를 등록하여 기능을 활성화 해야합니다. 기본적으로 이 등록 부분이 주석 처리 되어있어서, 간단하게 주석 해제만 해주면 됩니다.</p>
<p><code>config/app.php</code> 파일의 <code>providers</code> 배열에 주석 처리 되어있는 부분을 주석 해제 하겠습니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <code>.env</code> 파일에 <code>Pusher</code> 앱 정보 기입</h3>
<p>기본적으로 <code>Broadcast Driver</code>가 <code>log</code>로 설정되어 있습니다.</p>
<p>우리는 이미 정의되어있는 <code>pusher</code> 드라이버를 사용할 것이므로 <code>.env</code> 파일에서 드라이버를 변경해줍니다.</p>
<div class="language-dotenv line-numbers-mode" data-ext="dotenv"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>위에서 <code>Pusher</code> 앱을 만든 뒤 확인한 값들을 <code>.env</code> 파일에 기입합니다.</p>
<div class="language-dotenv line-numbers-mode" data-ext="dotenv"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Laravel</code> 공식문서에서 Real-Time 솔루션으로 <code>Pusher</code>를 권장하기 때문에 기본적으로 <code>.env</code> 하단에 <code>Pusher</code> 관련 설정값 부분이 있습니다. 해당 부분에 값들을 기입만 해주면 됩니다.<br>
(이 값들은 <code>config/broadcasting.php</code> 에서 사용됩니다. <a href="https://laravel.kr/docs/8.x/configuration" target="_blank" rel="noopener noreferrer">자세한 내용은 참고</a>)</p>
<h3> <code>Pusher</code> PHP SDK 설치</h3>
<p>우리의 <code>Laravel</code> 프로젝트에서 <code>Pusher</code> 앱에 요청을 보내기 위해 <code>Pusher</code>에서 제공해주는 SDK를 설치해야합니다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>위 패키지까지 설치했으면, Pusher를 사용하기 위한 사전준비는 끝났습니다. 이제 본격적으로 채팅 서비스를 위한 코드를 작성할 시간입니다.</p>
]]></content:encoded>
      <enclosure url="https://images.velog.io/images/bdu00chch/post/4d6941bb-f21a-4a0d-ab35-65225115b472/1024px-Logo.min.svg.png" type="image/png"/>
    </item>
    <item>
      <title>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #3 (w/ Laravel, Nuxt)</title>
      <link>https://bisue.github.io/posts/pusher-chat-app/3.html</link>
      <guid>https://bisue.github.io/posts/pusher-chat-app/3.html</guid>
      <source url="https://bisue.github.io/rss.xml">Pusher 를 이용한 실시간 채팅 웹앱 만들기 #3 (w/ Laravel, Nuxt)</source>
      <description>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #3 (w/ Laravel, Nuxt) 이번 글에서는 본격적으로 채팅 서비스를 위한 백엔드 코드들을 Laravel로 작성해보면서 Laravel에서 Pusher와 연동하여 이벤트를 클라이언트들로 브로드캐스팅 해보겠습니다.</description>
      <category>실시간 채팅 앱 만들기 (Pusher)</category>
      <pubDate>Mon, 12 Jul 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Pusher 를 이용한 실시간 채팅 웹앱 만들기 #3 (w/ Laravel, Nuxt)</h1>
<p>이번 글에서는 본격적으로 채팅 서비스를 위한 백엔드 코드들을 <code>Laravel</code>로 작성해보면서 <code>Laravel</code>에서 <code>Pusher</code>와 연동하여 이벤트를 클라이언트들로 브로드캐스팅 해보겠습니다.</p>
<!-- more -->
<h2> 가장 기본적인 기능 구현하기</h2>
<h3> 컨트롤러 생성</h3>
<p>일단 먼저 어떤 사용자가 다른 사용자에게 보낼 메세지를 작성하고, 엔터를 누르거나 '보내기' 버튼을 누르면 그 메세지가 우리의 서버를 거쳐서 채팅에 참여하는 다른 사용자들에게 보내져야 할 것입니다.</p>
<p>그러기 위해서는 먼저 우리 서버에서 이렇게 사용자가 보낼 메세지를 담은 요청을 처리할 무언가가 필요합니다. 그 무언가를 우리는 <code>ChatController</code> 라고 이름 붙이고 이것을 만들어나가겠습니다.</p>
<p>프로젝트 루트(artisan 파일이 있는 디렉토리)에서 아래 <code>artisan</code> 명령을 사용하면 가장 기본적인 <code>Laravel</code> 컨트롤러의 뼈대를 가진 <code>app/Http/Controllers/ChatController.php</code> 가 생성됩니다. 직접 파일을 만들어도 되지만 <code>artisan</code> 명령을 사용하면 편리하게 만들 수 있습니다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>만들어진 파일은 가장 기본적인 컨트롤러의 형태입니다. 여기에 사용자가 메세지를 보내려고 할 때의 요청을 처리할 <code>send</code> 메서드를 추가합니다. 내용은 아직 구현하지 않습니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 라우팅 정의</h3>
<p>지금 만든 컨트롤러는 '어떤 요청을 누가 처리할 건가?' 에서 '누가' 부분입니다. 어떤 컨트롤러의 메서드들이 어떤 요청을 담당해서 처리할 건지 분기하는 부분에 대한 정의가 필요합니다.</p>
<p>이 부분을 '라우팅' 이라고 하며 라우팅에 대한 정의는 <code>routes/</code> 디렉토리에 있는 파일들에 들어있습니다.</p>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>기본 설정에서, <code>routes/api.php</code>의 라우트들과 <code>routes/web.php</code>의 라우트들은 서로 다른 속성(미들웨어, 접두사, 등등)을 갖습니다. 각각 어떤 속성들이 부여되는지는 <code>app/Providers/RouteServiceProvider.php</code>의 <code>boot</code> 메서드에서 확인할 수 있습니다. 자세한 내용은 <a href="https://laravel.kr/docs/8.x/routing" target="_blank" rel="noopener noreferrer">공식문서 참고</a>.</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>이 시리즈에서는 <code>Laravel</code>을 API 서버로 사용할 것이므로 쓸모없는 미들웨어는 제외하고 API에 필요한 미들웨어들만 모아서 이미 정의되어 있는 <code>api</code> 미들웨어 그룹을 사용하는 <code>routes/api.php</code>에서만 라우트들을 정의하겠습니다.</p>
</div>
<p>우리가 만든 <code>ChatController</code>의 <code>send</code> 메서드는 <code>[POST] /chat/send</code> 로 들어오는 요청을 처리하도록 라우트를 정의하겠습니다.</p>
<p>그 전에, 기본적으로 <code>routes/api.php</code>의 라우트들은 모두 <code>/api</code>라는 prefix를 갖도록 설정되어있는데, 우리는 <code>routes/web.php</code>를 사용하지 않을 것이므로 거추장스러운 접두사를 빼겠습니다.</p>
<p><code>app/Providers/RouteServiceProvider.php</code>의 <code>boot</code> 메서드로 가서 접두사를 붙이는 부분을 수정합니다. 메서드 체인에서 <code>prefix('api')</code> 메서드 호출 부분을 수정하면 됩니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 routes/api.php에서 <code>[POST] /chat/send</code>에 대한 라우트를 작성하겠습니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>기존에 파일에 존재하던 쓸모없는 라우트는 지우고, <code>[POST] /chat/send</code> 요청을 <code>ChatController</code>의 <code>send</code> 메서드가 처리하게 하는 라우트를 하나 작성했습니다.</p>
<p>이제 남은 것은 <code>ChatController</code>의 <code>send</code> 메서드의 내용을 작성하는 부분입니다.</p>
<h3> 이벤트 작성</h3>
<p><code>send</code> 메서드를 작성하기 전에, <code>Laravel</code>의 브로드캐스팅 기능은 특정 이벤트가 발생했을 때, <code>Laravel Event</code> 객체 데이터를 브로드캐스팅 채널을 구독하는 클라이언트들에게 전달하며 해당 이벤트가 발생했다는 것을 알려주는 기능입니다.</p>
<p>따라서 브로드캐스팅을 하려면 먼저 <code>Event</code> 객체를 정의해야합니다. 아래 명령으로 <code>ChatSent</code>라는 <code>Event</code> 클래스 파일을 만들어 정의합니다. 만들어진 파일은 <code>app/Events</code> 디렉토리에 생성됩니다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>만들어진 파일의 모습은 다음과 같습니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ChatSent</code> 객체는 사용자가 메세지를 적어 보내면, 그 보낸이와 보낸 메세지 데이터를 담아 클라이언트로 전달되어야 합니다.</p>
<p>그러므로 클래스 내부에 변수를 만들고, 객체를 생성할 때 생성자에서 데이터를 넣을 수 있게 합니다.</p>
<p>또, 이벤트를 브로드캐스트하려면 해당 이벤트가 <code>ShouldBroadcast</code> 인터페이스를 구현해야합니다. 기본적으로 상단에 <code>use</code> 구문으로 들어가 있으므로, 바로 상속만 시켜주면 됩니다.</p>
<p><code>broadcastOn</code> 메서드는 이 이벤트가 브로드캐스트될 때, 어떤 채널을 통해 브로드캐스팅 될지 선택해주는 부분입니다.</p>
<p>여기서 채널의 종류로 <code>Public</code>, <code>Private</code>, <code>Presence</code> 세 가지가 있는데, 크게 클라이언트에서 해당 채널을 구독할 때 인증 절차를 거치느냐, 안 거치느냐의 두 분류로 나눌 수 있습니다.</p>
<p>우리의 가장 처음의 채팅 앱은 어떤 로그인도 없이 익명으로 대화할 수 있는 채팅 앱을 만들 예정입니다. 따라서 <code>Public</code> 채널을 사용하겠습니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <code>ChatController</code>의 <code>send</code> 메서드 작성</h3>
<p>이제 글의 가장 첫 부분에서 미뤄두었던 <code>ChatController</code>의 <code>send</code> 메서드를 작성하기 위한 모든 나머지 코드들을 작성했습니다. 이제 <code>ChatController</code>의 <code>send</code> 메서드만 마저 작성하면 됩니다.</p>
<p><code>send</code> 메서드가 해야할 일은 간단합니다.</p>
<p>클라이언트에서 메세지와 보내는 사람의 이름을 간단하게 문자열의 형태로 요청에 담아 보낼것입니다. <code>send</code> 메서드는 단순히 이 데이터를 가지고 <code>ChatSent</code> 이벤트 객체를 하나 생성해 클라이언트들에게 브로드캐스팅하면 됩니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>가장 간단한 형태의 채팅 앱을 위한 백엔드 코드 작성이 끝났습니다.</p>
<p>지금 코드로는 DB도 사용하지 않아 클라이언트에서 새로고침을 하거나 하면 기존 대화목록이 남아있지도 않고, 단순히 클라이언트에서 메세지를 담은 요청을 우리 서버에 보내면, <code>chat</code> 채널을 구독하는 클라이언트들에게 브로드캐스팅하는 기능만 담당할 수 있습니다.</p>
<p>다음 포스팅부터 간단한 채팅 페이지를 만들어보고, 이 간단한 기능이 잘 작동하는지 먼저 테스트해본 후에 로그인, DB 연동 등 여러 가지 기능을 추가해보면서 가장 간단한 형태부터 우리가 원하는 최종 형태까지 채팅 앱을 개선하겠습니다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #4 (w/ Laravel, Nuxt)</title>
      <link>https://bisue.github.io/posts/pusher-chat-app/4.html</link>
      <guid>https://bisue.github.io/posts/pusher-chat-app/4.html</guid>
      <source url="https://bisue.github.io/rss.xml">Pusher 를 이용한 실시간 채팅 웹앱 만들기 #4 (w/ Laravel, Nuxt)</source>
      <description>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #4 (w/ Laravel, Nuxt) 이번 글에서는 가장 간단한 형태의 채팅 앱 프론트엔드 코드를 작성하기 전에, Nuxt(or Vue) 개발환경을 설정해보겠습니다.</description>
      <category>실시간 채팅 앱 만들기 (Pusher)</category>
      <pubDate>Tue, 13 Jul 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Pusher 를 이용한 실시간 채팅 웹앱 만들기 #4 (w/ Laravel, Nuxt)</h1>
<p>이번 글에서는 가장 간단한 형태의 채팅 앱 프론트엔드 코드를 작성하기 전에, <code>Nuxt</code>(or <code>Vue</code>) 개발환경을 설정해보겠습니다.</p>
<!-- more -->
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>로컬 개발 환경에 최신 LTS 버전의 <code>Node</code> + <code>NPM</code> 이 설치되어있다고 가정하겠습니다. 설치되어있지 않은 경우 <a href="https://nodejs.org/ko/" target="_blank" rel="noopener noreferrer">Node 사이트</a> 에서 자신의 플랫폼에 맞게 설치하거나 Window인 경우 <code>Chocolatey</code> 패키지 매니저를 사용하여 설치할 수도 있습니다.</p>
</div>
<h2> Nuxt?</h2>
<p>시리즈의 처음에서 우리는 프론트엔드에서 <code>Nuxt</code>를 사용한다고 했었습니다.</p>
<p><code>Nuxt</code>는 <code>Vue</code>를 감싼 프레임워크입니다. SEO와 사용자 경험을 위한 <code>SSR</code>을 별도의 까다로운 설정/설계 없이 가능하게 해주고, 기타 <code>Vue</code> 개발에 필요한 여러가지를 프레임워크 차원에서 제공해줍니다.</p>
<p>다음 시리즈에 만들 가장 간단한 형태의 채팅 앱은 사실 그냥 <code>Vue</code>만 사용해도 더 가볍고 쉽게 만들 수 있습니다.</p>
<p>그렇지만 앞으로 추가할 많은 기능들의 구현에서의 개발 편의성과 실제 배포시에 검색엔진 최적화 등을 생각하면 처음부터 <code>Nuxt</code>로 진행하는 것이 더 나은 듯 해서 현재는 오버헤드가 크긴 하지만 <code>Nuxt</code>로 시작하겠습니다.</p>
<h2> Nuxt 개발 환경 설정</h2>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p><code>Nuxt</code>는 <code>Node</code> + <code>NPM</code>(or <code>Yarn</code>) 환경을 필요로 합니다. <code>Node</code>와 <code>NPM</code>이 개발 환경에 설치되어 있다고 가정하고 진행합니다.</p>
</div>
<h3> 새 Nuxt 프로젝트 생성</h3>
<p><code>Laravel</code>에서와 같이, <code>Nuxt</code>도 패키지 매니저를 통해 한 줄의 명령으로 새로운 프로젝트 구조를 만들어낼 수 있습니다.</p>
<p>아래 명령을 사용하면 현재 디렉토리에 지정한 이름의 디렉토리를 만들고 그 안에 <code>Nuxt</code> 프로젝트 구조를 만들어줍니다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>위 명령을 치면, 여러가지 프로젝트에 대한 정보를 물어봅니다. 하나하나 살펴보겠습니다.</p>
<ol>
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/72aff123-11ac-4e10-88ab-b2ccea408bbc/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>프로젝트의 이름을 물어봅니다. 그냥 엔터를 누르면 소괄호 안에 있는 값이 선택됩니다.</p>
<ol start="2">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/9a8b8fc7-5e22-4522-b602-939d5a3189b3/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>프로젝트에서 <code>JS</code>를 사용할지, <code>TS</code>를 사용할지 물어봅니다. <code>TS</code>는 사용할 계획이 없으므로 <code>JS</code>를 선택합니다.</p>
<ol start="3">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/ae3d18f1-d065-49f6-9bbc-06bebef69fe2/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>프로젝트의 패키지매니저로 <code>Yarn</code>을 사용할건지, <code>NPM</code>을 사용할건지 물어봅니다. <code>NPM</code>을 사용했으므로 <code>NPM</code>을 선택합니다.</p>
<ol start="4">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/db1608e0-631c-4b7f-95e5-aaa4d736b9a6/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>프로젝트에서 사용할 UI 프레임워크를 물어봅니다. 이 시리즈에서는 <code>Tailwind CSS</code>를 사용하겠습니다.</p>
<ol start="5">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/9f71de52-01e9-4098-92b8-255999fe953c/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>추가로 적용할 <code>Nuxt Module</code>을 물어봅니다. 서버로 요청을 보낼 때 <code>Axios</code>를 사용할 것이므로 <code>Axios</code>에만 체크(스페이스바)하고 넘어갑니다.</p>
<ol start="6">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/dbfab703-9373-4f19-ad4d-a008b6c3d815/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>프로젝트에서 사용할 <code>JS Lint</code> 툴을 선택합니다. 저는 개인적으로 <code>ESLint</code>와 <code>Prettier</code>를 <code>VSCode</code>와 연동해서 사용합니다. 개인 취향껏 고르면 됩니다.<br>
(사용하지 않으시려면 그냥 넘어가주세요.)</p>
<ol start="7">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/a4e4c469-d23c-4bc4-b1e5-ab9c92c5e748/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>프로젝트에서 사용할 테스트 프레임워크를 물어봅니다. 이 시리즈에서는 테스트는 하지 않을 예정입니다. <code>None</code>을 선택해주세요.</p>
<ol start="8">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/ebb25349-5cd1-4850-874c-5c45455c92be/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><code>Nuxt</code>의 렌더링 모드를 선택합니다. 우리는 편리한 <code>SSR</code>을 위해 <code>Nuxt</code>를 사용하는 것이므로.. <code>Universal</code>을 선택합니다. 이후에 자유롭게 변경 가능합니다.</p>
<ol start="9">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/52a68e78-e95e-487c-8d3a-fdd40953643b/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>이전과 연결되는 선택지입니다. <code>SSG</code>가 아닌 <code>SSR</code>을 원하므로 <code>Server</code>를 선택합니다.</p>
<ol start="10">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/c9a46eeb-deac-445c-81f4-e61d4a3bf6e0/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>개발 편의에 도움을 주는 추가 툴을 선택합니다. 취향껏 선택하면 됩니다.</p>
<ol start="11">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/0bf325b6-4752-4e12-a286-ca2a831953b2/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>사용할 CI 툴을 선택합니다. 사용 안할 예정이므로 <code>None</code>을 선택합니다.</p>
<ol start="12">
<li></li>
</ol>
<figure><img src="https://images.velog.io/images/bdu00chch/post/da4677ee-e07e-4393-9a08-8dbcce10399f/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>마지막으로 프로젝트에서 사용할 버전관리 툴을 선택합니다. <code>Git</code>을 사용할 것이므로 <code>Git</code>을 선택하고 넘어갑니다.</p>
<p>긴 질의응답을 마치면 <code>Nuxt</code>구조가 만들어지기 시작합니다. 환경에 따라 다르지만 금방 걸립니다.</p>
<h3> Nuxt 구조 둘러보기</h3>
<p>새롭게 완성된 <code>Nuxt</code> 프로젝트 내부로 들어가보겠습니다.</p>
<p>가장 먼저 눈에 띄는건 nuxt.config.js 파일입니다. 이 파일은 Nuxt에서 가장 중요한 파일입니다. 이 파일에서 <code>Nuxt Module</code> 적용 등 Nuxt와 관련된 여러가지 설정을 할 수 있습니다. 자세한 내용은 <a href="https://ko.nuxtjs.org/docs/2.x/features/configuration" target="_blank" rel="noopener noreferrer">Nuxt 공식 문서를 참고</a>해주세요.</p>
<p>프로젝트 루트에는 여러개의 폴더들이 존재합니다. 몇몇 디렉토리들은 특수한 기능을 가지고 있습니다. <code>pages</code> 디렉토리에 있는 <code>Vue</code> 컴포넌트들은 각각 페이지로 취급되어 파일명에 해당하는 <code>route</code>(<code>vue-router</code> 사용)가 자동으로 생성됩니다. <code>store</code> 디렉토리에는 <code>Vuex</code> 모듈을 파일로 구분하여 넣어두면 각 파일명에 맞게 모듈화되어 사용됩니다.</p>
<p>기타 폴더들과 모든 기능들은 이 시리즈에서 다루기는 너무 많아서, <a href="https://ko.nuxtjs.org/docs/2.x/get-started/directory-structure" target="_blank" rel="noopener noreferrer">공식문서</a>를 참고해주세요.</p>
<h3> 완료</h3>
<p>새로운 <code>Nuxt</code> 프로젝트를 만들었습니다. 다음 포스트부터 <code>Laravel Echo</code> 라이브러리를 사용해 <code>Pusher</code>와 이전 포스트에서 만든 우리의 <code>Laravel</code> 백엔드와 연결해보고 동작을 테스트해보겠습니다.</p>
]]></content:encoded>
      <enclosure url="https://images.velog.io/images/bdu00chch/post/72aff123-11ac-4e10-88ab-b2ccea408bbc/image.png" type="image/png"/>
    </item>
    <item>
      <title>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #5 (w/ Laravel, Nuxt)</title>
      <link>https://bisue.github.io/posts/pusher-chat-app/5.html</link>
      <guid>https://bisue.github.io/posts/pusher-chat-app/5.html</guid>
      <source url="https://bisue.github.io/rss.xml">Pusher 를 이용한 실시간 채팅 웹앱 만들기 #5 (w/ Laravel, Nuxt)</source>
      <description>Pusher 를 이용한 실시간 채팅 웹앱 만들기 #5 (w/ Laravel, Nuxt) 이번 글에서는 채팅 앱 프론트엔드 코드를 작성하고 Pusher, 만들어놓은 Laravel 백엔드와 각각 연결해서 가장 간단한 채팅 앱을 만들어보겠습니다.</description>
      <category>실시간 채팅 앱 만들기 (Pusher)</category>
      <pubDate>Thu, 15 Jul 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Pusher 를 이용한 실시간 채팅 웹앱 만들기 #5 (w/ Laravel, Nuxt)</h1>
<p>이번 글에서는 채팅 앱 프론트엔드 코드를 작성하고 <code>Pusher</code>, 만들어놓은 <code>Laravel</code> 백엔드와 각각 연결해서 가장 간단한 채팅 앱을 만들어보겠습니다.</p>
<!-- more -->
<h2> 프론트엔드 구현</h2>
<h3> <code>Pusher</code> 연결을 위한 패키지 설치</h3>
<p>우리의 <code>Nuxt</code> 프로젝트에서 <code>Pusher</code>를 연결하여 채널을 구독하기 위해서 <code>pusher-js</code> 패키지와 <code>laravel-echo</code> 패키지를 설치합니다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info">
<p class="hint-container-title">정보</p>
<blockquote>
<p><code>Pusher</code>와 연결하려면 <code>pusher-js</code>만 설치하여 연결해도 되지만 <code>laravel-echo</code> 패키지는 <code>Laravel</code>에서 보내는 이벤트를 더 편하게 받을 수 있도록 <code>pusher-js</code>를 감싼 패키지입니다. <code>laravel-echo</code>의 자세한 내용은 <a href="https://laravel.kr/docs/8.x/broadcasting#receiving-broadcasts" target="_blank" rel="noopener noreferrer"><code>Laravel</code> 문서를 참고</a>하세요. <code>pusher-js</code>만 이용하여 연결하는 방법은 <a href="https://pusher.com/docs/channels/using_channels/client-api-overview/" target="_blank" rel="noopener noreferrer">Pusher 문서를 참고</a>하세요.</p>
</blockquote>
</div>
<h3> ChatApp 컴포넌트 작성</h3>
<p><code>chat</code> 채널에 구독하고 <code>ChatSent</code> <code>Laravel</code> 이벤트를 수신하여 화면에 목록으로 보여주며, 다른 사용자들에게 메세지를 보낼 수 있는 <code>ChatApp</code> 컴포넌트를 작성하겠습니다.</p>
<p><code>Nuxt</code>에서 컴포넌트는  <code>components/</code> 디렉토리에 작성합니다. 이 디렉토리에 있는 <code>.vue</code> 파일들은 <code>nuxt.config.js</code> 파일의 <code>components</code> 옵션이 <code>true</code> 라면 자동으로 임포트됩니다. (기본값)</p>
<p><code>components/ChatApp.vue</code> 파일을 만들고 컴포넌트를 작성합니다.</p>
<div class="language-vue line-numbers-mode" data-ext="vue"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ChatApp</code> 컴포넌트가 마운트되면 <code>laravel-echo</code> 라이브러리를 사용해 <code>chat</code> 채널의 <code>ChatSent</code> 이벤트를 구독하도록 했습니다. <code>ChatSent</code> 이벤트를 받으면 <code>chats</code> 배열에 추가하고 이 배열을 채팅창의 느낌으로 화면에 보여줬습니다.</p>
<p>하단의 텍스트박스에 이름과 메세지를 입력하고 엔터를 치거나 전송 버튼을 누르면 <code>send</code> 메서드를 통해 입력을 검증한 뒤 이전 포스트에서 만들어놓은 <code>/chat/send</code> URL로 보내 브로드캐스팅하여 다른 구독자들에게 알리도록 했습니다.</p>
<h3> index 페이지 작성</h3>
<p><code>ChatApp</code> 컴포넌트를 만들었으니, 이 컴포넌트를 보여줄 페이지가 필요합니다.</p>
<p><code>Nuxt</code>에서 페이지 컴포넌트는 <code>pages/</code> 디렉토리에 작성합니다. 해당 디렉토리에 존재하는 <code>.vue</code> 파일들은 자동으로 자신의 파일명으로 라우트(<code>vue-router</code>)를 생성합니다. <a href="https://ko.nuxtjs.org/docs/2.x/directory-structure/pages" target="_blank" rel="noopener noreferrer">참고</a></p>
<p>우리가 만든 컴포넌트를 <code>/</code> Path 로 들어오면 바로 보이도록, <code>pages/</code> 디렉토리에 <code>index.vue</code> 파일을 만들어서 <code>ChatApp</code> 컴포넌트를 적당히 렌더링하겠습니다.</p>
<div class="language-vue line-numbers-mode" data-ext="vue"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Nuxt 개발 서버 실행 및 테스트</h3>
<p>간단하게 프론트엔드 코드를 모두 작성했습니다.</p>
<p>이제 <code>Nuxt</code> 개발 서버를 실행해 우리가 만든 프론트엔드 코드를 제공하는 <code>Node</code> 서버를 실행시켜 접속해봅시다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>위 명령을 실행하면 잠시 뒤 서버가 실행됩니다. 기본적으로 <a href="http://localhost:3000" target="_blank" rel="noopener noreferrer">http://localhost:3000</a> 에서 실행됩니다. 크롬으로 접속해봅시다.</p>
<figure><img src="https://images.velog.io/images/bdu00chch/post/a48623f5-6d44-4e66-a8c0-d1d856b58173/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>우리의 첫 채팅 앱이 완성되었습니다!</p>
<p>여러개의 탭이나 창을 띄워 여러개의 페이지를 띄우고, 그 중 하나의 페이지에서 이름과 메세지를 입력하고 전송을 눌러보세요.</p>
<figure><img src="https://images.velog.io/images/bdu00chch/post/4cc0f249-c930-4c8d-99a6-16db1bd28c29/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>하나의 페이지에서 메세지를 전송하면, 다른 페이지들에 그 채팅이 전달됩니다! 성공적입니다.</p>
<p>그런데 지금 서버의 코드는 DB를 사용하지 않아서 채팅 기록들이 남지 않고 새로고침하면 사라집니다.</p>
<h2> <code>Laravel</code> 서버 DB 연동</h2>
<p>간단하게 채팅 기록을 저장하는 테이블을 만들어 채팅들을 저장하고, 프론트에서는 채팅 앱이 처음 로딩될 때 서버에 요청하여 DB에 있는 기존 채팅들을 가져와 목록에 추가시켜보겠습니다.</p>
<h3> <code>Chat</code> 모델 및 마이그레이션 생성</h3>
<p><code>Laravel</code>은 데이터베이스를 다룰 때, 일반적으로 SQL을 직접 사용하지 않고, <code>Eloquent</code> ORM을 사용하여 테이블을 모델로 추상화하여 다룰 수 있는 인터페이스를 제공합니다.</p>
<p><code>Laravel</code>의 ORM 기능을 사용하기 위해 우리의 채팅 기록을 표현할 <code>Chat</code> 모델을 만들겠습니다. 모델이 만들어지는 폴더는 <code>Laravel</code> 8.x 기준 <code>/app/Models</code> 디렉토리입니다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>모델을 만들면서 <code>-m</code> 옵션을 붙였습니다. <code>-m</code> 옵션을 붙이면 모델에 대한 마이그레이션 파일도 같이 생성합니다.</p>
<p>마이그레이션은 데이터베이스 스키마 조작을 프로그래밍적으로 정의해두고 실행할 수 있도록 해주는 <code>Laravel</code>의 기능입니다. 다른 환경 간에 쉽게 스키마를 동기화할 수 있도록 사용합니다. <a href="https://laravel.kr/docs/6.x/migrations" target="_blank" rel="noopener noreferrer">참고</a></p>
<p>만들어진 마이그레이션 파일에 우리의 채팅 기록 데이터에 필요한 <code>Column</code>들을 추가하여 <code>chats</code> 테이블에 대한 마이그레이션을 작성합니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>보낸 사람의 이름을 저장하는 <code>sender</code>, 보낸 메세지를 저장하는 <code>message</code> <code>Column</code>을 추가했습니다.</p>
<p>마이그레이션을 모두 작성했으면, 아래 명령을 실행해 추가한 마이그레이션을 실행합니다. 해당 마이그레이션이 실행되면 <code>chats</code> 테이블이 생성됩니다.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>이제 <code>Chat</code> 모델 파일을 보겠습니다.</p>
<p><code>Laravel</code>의 모델은 기본적으로 <code>모델 이름을 복수형으로 바꾼 것의 snakeCase</code>을 이름으로 가진 테이블을 찾아 연결됩니다. 모델을 만들때 <code>-m</code> 옵션을 붙여 생성하면 생성되는 마이그레이션의 테이블 이름은 기본적으로 이 형태를 띕니다. 따라서 모델이 어느 테이블에 대한 건지 테이블 이름을 지정해 줄 필요가 없습니다.</p>
<p>나중에 대량 할당(Mass Assignments)를 사용하기 위해 <code>guarded</code> 속성을 <code>[]</code>로 설정하여 모든 프로퍼티를 대량 할당 가능하게 합니다. <a href="https://laravel.kr/docs/6.x/eloquent#mass-assignment" target="_blank" rel="noopener noreferrer">참고</a></p>
<p>모델 준비는 이것으로 끝났습니다. 이제 <code>ChatController</code>를 수정하면서 <code>Chat</code> 모델을 사용하여 <code>DB</code>와 연동해보겠습니다.</p>
<h3> <code>ChatController</code> 개선</h3>
<p>기존 <code>send</code> 메서드에 validation을 추가하고, <code>Chat</code> 모델을 이용해 데이터베이스에 새 채팅 데이터를 넣은 후 브로드캐스팅 하도록 수정합니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>프론트에서 <code>ChatApp</code>이 처음 로드될 때, 서버 데이터베이스에 담겨있는 기존 대화 기록들을 가져올 수 있어야 합니다. 이를 위한 <code>load</code> 메서드를 만듭니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 라우트 추가</h3>
<p>새로 만든 <code>load</code> 메서드에 대한 라우트를 만들어줍니다. <code>[GET] /chats</code> 요청을 연결하겠습니다.</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>백엔드 쪽 준비는 끝났습니다.</p>
<h3> <code>ChatApp</code> 컴포넌트 개선</h3>
<div class="language-vue line-numbers-mode" data-ext="vue"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>기존에서 추가한 부분은 <code>fetch</code> 메서드 하나입니다.</p>
<p><code>fetch</code> 메서드를 추가하여 그 내부에서 <code>[GET] /chats</code> 요청을 하고 그것을 채팅 목록에 초기화합니다. <code>fetch</code> 메서드는 <code>Nuxt</code>에서 제공해주는 lifecycle hook 입니다. SSR 모드에서, 페이지를 렌더링 하기 전에 API 호출 등을 통해 데이터를 가져올 수 있게 합니다.</p>
<h2> 완료</h2>
<p>완성입니다. <code>Laravel</code> 프로젝트를 <code>php artisan serve</code> 명령으로 띄우고, <code>Nuxt</code> 프로젝트에서 <code>npm run dev</code> 명령을 실행하고 <a href="http://localhost:3000" target="_blank" rel="noopener noreferrer">http://localhost:3000</a> 에 들어가서 채팅을 몇번 쳐보고 새로고침을 눌러보세요.</p>
<p>이전과는 다르게 페이지가 다시 로딩되어도 기존 채팅 기록이 사라지지 않는 것을 확인할 수 있습니다.</p>
]]></content:encoded>
      <enclosure url="https://images.velog.io/images/bdu00chch/post/a48623f5-6d44-4e66-a8c0-d1d856b58173/image.png" type="image/png"/>
    </item>
  </channel>
</rss>